require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs');
const path = require('path');
const AdmZip = require('adm-zip');
const unrar = require('node-unrar-js');
const axios = require('axios');
const { processSingleFile } = require('./single-file-converter');

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ .env —Ñ–∞–π–ª–∞
const token = process.env.TELEGRAM_BOT_TOKEN || '7982004413:AAHW-NHd2ax_7b7i53nE5nyBu-JYMGqsdm0';
const openrouterApiKey = process.env.OPENROUTER_API_KEY;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
const MAX_RETRIES = 5;
const RETRY_DELAY = 3000;

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞ —Å –æ–ø—Ü–∏—è–º–∏
const bot = new TelegramBot(token, { 
  polling: {
    interval: 300,
    params: {
      timeout: 10
    },
    autoStart: true,
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ polling
    error: (error) => {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ polling:', error.message);
    }
  },
  request: {
    // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–µ —Ç–∞–π–º–∞—É—Ç—ã
    timeout: 30000,
    // –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    retries: MAX_RETRIES,
    retryDelay: RETRY_DELAY
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω—ã—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –æ–±–µ—â–∞–Ω–∏–π
process.on('unhandledRejection', (reason, promise) => {
  console.error('–ù–µ–ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ promise:', reason);
});

// –ü–∞–ø–∫–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
const uploadsDir = path.join(__dirname, 'telegram_uploads');
const extractDir = path.join(__dirname, 'telegram_extracted');
const outputDir = path.join(__dirname, 'telegram_results');
const promptsDir = path.join(__dirname, 'telegram_prompts');
const analysisDir = path.join(__dirname, 'telegram_analysis');

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
[uploadsDir, extractDir, outputDir, promptsDir, analysisDir].forEach(dir => {
  if (!fs.existsSync(dir)) {
    fs.mkdirSync(dir, { recursive: true });
  }
});

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userStates = {};

// –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ LLM (–≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è —Ü–µ–Ω—ã)
const availableModels = [
  { 
    id: 'anthropic/claude-3.7-sonnet', 
    name: 'Claude 3.7 Sonnet', 
    price: '$3/M —Ç–æ–∫–µ–Ω–æ–≤',
    input_price: 3.00,
    output_price: 15.00
  },
  { 
    id: 'openai/gpt-4.1', 
    name: 'GPT-4.1', 
    price: '$2/M —Ç–æ–∫–µ–Ω–æ–≤',
    input_price: 2.00,
    output_price: 8.00
  },
  { 
    id: 'google/gemini-2.5-pro-preview', 
    name: 'Gemini 2.5 Pro Preview', 
    price: '$1.25/M —Ç–æ–∫–µ–Ω–æ–≤',
    input_price: 1.25,
    output_price: 10
  },
  { 
    id: 'openai/gpt-4.1-mini', 
    name: 'GPT-4.1 Mini', 
    price: '$0.40/M —Ç–æ–∫–µ–Ω–æ–≤',
    input_price: 0.40,
    output_price: 1.60
  },
  { 
    id: 'meta-llama/llama-4-maverick', 
    name: 'Llama 4 Maverick', 
    price: '$0.17/M —Ç–æ–∫–µ–Ω–æ–≤',
    input_price: 0.17,
    output_price: 0.6
  },
  { 
    id: 'google/gemini-2.5-flash-preview', 
    name: 'Gemini 2.5 Flash Preview', 
    price: '$0.15/M —Ç–æ–∫–µ–Ω–æ–≤',
    input_price: 0.15,
    output_price: 0.6
  },
  { 
    id: 'openai/gpt-4.1-nano', 
    name: 'GPT-4.1 Nano', 
    price: '$0.10/M —Ç–æ–∫–µ–Ω–æ–≤',
    input_price: 0.1,
    output_price: 0.4
  },
  { 
    id: 'google/gemini-2.0-flash-001', 
    name: 'Gemini 2.0 Flash', 
    price: '$0.10/M —Ç–æ–∫–µ–Ω–æ–≤',
    input_price: 0.1,
    output_price: 0.4
  },
  { 
    id: 'qwen/qwen-turbo', 
    name: 'Qwen Turbo', 
    price: '$0.05/M —Ç–æ–∫–µ–Ω–æ–≤',
    input_price: 0.05,
    output_price: 0.2
  },
  { 
    id: 'google/gemini-flash-1.5-8b', 
    name: 'Gemini Flash 1.5', 
    price: '$0.038/M —Ç–æ–∫–µ–Ω–æ–≤',
    input_price: 0.038,
    output_price: 0.15
  }
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
function getMainMenu() {
  return {
    reply_markup: {
      keyboard: [
        [{ text: 'üìù –í—ã–±—Ä–∞—Ç—å –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞' }],
        [{ text: 'üìä –ê–Ω–∞–ª–∏–∑' }], 
        [{ text: 'üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å ZIP –∏–ª–∏ RAR –∞—Ä—Ö–∏–≤' }],
        [{ text: '‚ùì –ü–æ–º–æ—â—å' }, { text: 'üîÑ –û—á–∏—Å—Ç–∏—Ç—å' }]
      ],
      resize_keyboard: true
    }
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
function getModelSelectionMenu(prefix = 'model:') {
  const inlineKeyboard = availableModels.map(model => {
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ –∫–Ω–æ–ø–∫–µ
    const modelName = model.name.length > 15 ? model.name.substring(0, 15) + '...' : model.name;
    return [{ text: `${modelName} (${model.price})`, callback_data: `${prefix}${model.id}` }];
  });
  
  return {
    reply_markup: {
      inline_keyboard: inlineKeyboard
    }
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞–º–∏
function getPromptsMenu(chatId) {
  const userPromptsFile = path.join(promptsDir, `${chatId}.json`);
  let prompts = [];
  
  if (fs.existsSync(userPromptsFile)) {
    try {
      prompts = JSON.parse(fs.readFileSync(userPromptsFile, 'utf8'));
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –ø—Ä–æ–º–ø—Ç–æ–≤:', err);
    }
  }
  
  const inlineKeyboard = [];
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ–º–ø—Ç—ã —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–∏—è
  prompts.forEach((prompt, index) => {
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∏–º–µ–Ω–∏ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const promptName = prompt.name.length > 20 ? prompt.name.substring(0, 20) + '...' : prompt.name;
    inlineKeyboard.push([
      { text: promptName, callback_data: `prompt_select:${index}` },
      { text: '‚ùå', callback_data: `prompt_delete:${index}` }
    ]);
  });
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
  inlineKeyboard.push([{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç', callback_data: 'prompt_add' }]);
  
  return {
    reply_markup: {
      inline_keyboard: inlineKeyboard
    }
  };
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function initUserState(chatId) {
  if (!userStates[chatId]) {
    userStates[chatId] = {
      currentState: 'main', // 'main', 'prompt_adding', 'waiting_for_file', 'processing', 'waiting_for_txt', –∏ —Ç.–¥.
      selectedModel: availableModels[0].id, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–µ—Ä–≤–∞—è –º–æ–¥–µ–ª—å
      selectedPrompt: null,
      promptName: null,
      promptText: '', // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–º–ø—Ç–∞ –ø—Ä–∏ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–º –≤–≤–æ–¥–µ
      uploadedTextFiles: [], // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
      combinedTextPath: null, // –ü—É—Ç—å –∫ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–º—É —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É —Ñ–∞–π–ª—É
      analysisPrompt: null, // –ü—Ä–æ–º–ø—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
      analysisModel: null, // –ú–æ–¥–µ–ª—å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
      analyzeInParts: false // –§–ª–∞–≥ –¥–ª—è —Ä–µ–∂–∏–º–∞ –∞–Ω–∞–ª–∏–∑–∞ (—Ü–µ–ª–∏–∫–æ–º –∏–ª–∏ –ø–æ —á–∞—Å—Ç—è–º)
    };
  }
  return userStates[chatId];
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function saveUserPrompts(chatId, prompts) {
  const userPromptsFile = path.join(promptsDir, `${chatId}.json`);
  try {
    fs.writeFileSync(userPromptsFile, JSON.stringify(prompts, null, 2), 'utf8');
    return true;
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤:', err);
    return false;
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function getUserPrompts(chatId) {
  const userPromptsFile = path.join(promptsDir, `${chatId}.json`);
  if (fs.existsSync(userPromptsFile)) {
    try {
      return JSON.parse(fs.readFileSync(userPromptsFile, 'utf8'));
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –ø—Ä–æ–º–ø—Ç–æ–≤:', err);
      return [];
    }
  }
  return [];
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  initUserState(chatId);
  
  const welcomeMessage = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫—É.\n\n' +
    '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:';
  
  sendMessageWithRetry(chatId, welcomeMessage, getMainMenu());
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
bot.onText(/\/help/, (msg) => {
  const chatId = msg.chat.id;
  const helpMessage = '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n' +
    '1. –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å LLM –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ).\n' +
    '2. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–º–ø—Ç –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ).\n' +
    '3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—Ä—Ö–∏–≤ (.zip –∏–ª–∏ .rar) —Å HTML-—Ñ–∞–π–ª–∞–º–∏ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.\n' +
    '4. –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞.\n' +
    '5. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞, –≤—ã–±—Ä–∞–≤ —Ä–µ–∂–∏–º –∞–Ω–∞–ª–∏–∑–∞ (—Ü–µ–ª–∏–∫–æ–º –∏–ª–∏ –ø–æ —á–∞—Å—Ç—è–º).\n\n' +
    '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: .zip –∏ .rar –∞—Ä—Ö–∏–≤—ã —Å HTML-—Ñ–∞–π–ª–∞–º–∏.';
  
  sendMessageWithRetry(chatId, helpMessage, getMainMenu());
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ–Ω—é
bot.on('message', async (msg) => {
  if (!msg.text || msg.document) return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
  
  const chatId = msg.chat.id;
  const text = msg.text;
  const userState = initUserState(chatId);
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–≤–æ–¥–∞ –ø—Ä–æ–º–ø—Ç–∞
  if (userState.currentState === 'prompt_adding_text') {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–≤–æ–¥–∞ –ø—Ä–æ–º–ø—Ç–∞
    if (text === '/done' || text === '‚úÖ –ì–æ—Ç–æ–≤–æ') {
      const prompts = getUserPrompts(chatId);
      prompts.push({
        name: userState.promptName || `–ü—Ä–æ–º–ø—Ç #${prompts.length + 1}`,
        text: userState.promptText,
        created: new Date().toISOString()
      });
      
      if (saveUserPrompts(chatId, prompts)) {
        await sendMessageWithRetry(chatId, `‚úÖ –ü—Ä–æ–º–ø—Ç "${userState.promptName || `–ü—Ä–æ–º–ø—Ç #${prompts.length}`}" —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!`);
        userState.currentState = 'main';
        userState.promptText = ''; // –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–º–ø—Ç–∞
        await sendMessageWithRetry(chatId, '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?', getMainMenu());
      } else {
        await sendMessageWithRetry(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–º–ø—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', getMainMenu());
        userState.currentState = 'main';
        userState.promptText = ''; // –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–º–ø—Ç–∞
      }
      return;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –ø—Ä–æ–º–ø—Ç—É
    if (userState.promptText) {
      userState.promptText += '\n' + text; // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    } else {
      userState.promptText = text; // –≠—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–≤–æ–¥–∞
    await sendMessageWithRetry(chatId, '–¢–µ–∫—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤–≤–æ–¥ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /done –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "‚úÖ –ì–æ—Ç–æ–≤–æ", —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å.', {
      reply_markup: {
        keyboard: [
          [{ text: '‚úÖ –ì–æ—Ç–æ–≤–æ' }],
          [{ text: '‚ùå –û—Ç–º–µ–Ω–∞' }]
        ],
        resize_keyboard: true
      }
    });
    return;
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø—Ä–æ–º–ø—Ç–∞
  if (userState.currentState === 'prompt_adding_name') {
    userState.promptName = text;
    userState.promptText = ''; // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º
    userState.currentState = 'prompt_adding_text';
    await sendMessageWithRetry(chatId, `–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è "${text}".\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /done –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "‚úÖ –ì–æ—Ç–æ–≤–æ".`, {
      reply_markup: {
        keyboard: [
          [{ text: '‚úÖ –ì–æ—Ç–æ–≤–æ' }],
          [{ text: '‚ùå –û—Ç–º–µ–Ω–∞' }]
        ],
        resize_keyboard: true
      }
    });
    return;
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–≤–æ–¥–∞ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
  if (userState.currentState === 'analysis_prompt_input') {
    userState.analysisPrompt = {
      name: '–í—Ä–µ–º–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç',
      text: text,
      created: new Date().toISOString()
    };
    
    userState.currentState = 'analysis_model_selection';
    await sendMessageWithRetry(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:', getModelSelectionMenu('analysis_model:'));
    return;
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é
  switch (text) {
    case 'üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å ZIP –∏–ª–∏ RAR –∞—Ä—Ö–∏–≤':
      userState.currentState = 'waiting_for_file';
      await sendMessageWithRetry(chatId, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ ZIP –∏–ª–∏ RAR –∞—Ä—Ö–∏–≤ —Å HTML-—Ñ–∞–π–ª–∞–º–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.');
      break;
      
    case 'üìù –í—ã–±—Ä–∞—Ç—å –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞': 
      await sendMessageWithRetry(chatId, '–í–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã:', getPromptsMenu(chatId));
      break;
      
    case 'üìä –ê–Ω–∞–ª–∏–∑':
      userState.currentState = 'waiting_for_txt';
      userState.uploadedTextFiles = []; // –°–±—Ä–æ—Å–∏–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –∞–Ω–∞–ª–∏–∑–æ–º
      
      await sendMessageWithRetry(chatId, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã (.txt) —Å –¥–∏–∞–ª–æ–≥–∞–º–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. ' + 
        '–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤.\n\n' +
        '–ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É".',
        {
          reply_markup: {
            keyboard: [
              [{ text: '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É' }],
              [{ text: '‚ùå –û—Ç–º–µ–Ω–∞' }]
            ],
            resize_keyboard: true
          }
        });
      break;
      
    case '‚ùì –ü–æ–º–æ—â—å':
      const helpMessage = '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n' +
        '1. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –∏–∑ –∞—Ä—Ö–∏–≤–∞ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ "üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å ZIP –∏–ª–∏ RAR –∞—Ä—Ö–∏–≤"\n' +
        '2. –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –∑–∞–¥–∞–π—Ç–µ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç —á–µ—Ä–µ–∑ "üìù –í—ã–±—Ä–∞—Ç—å –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"\n' +
        '3. –ù–∞–∂–º–∏—Ç–µ "üìä –ê–Ω–∞–ª–∏–∑", –∑–∞–≥—Ä—É–∑–∏—Ç–µ TXT —Ñ–∞–π–ª(—ã) –∏ –Ω–∞–∂–º–∏—Ç–µ "–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É"\n' +
        '4. –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–º–ø—Ç –∏ –º–æ–¥–µ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n' +
        '5. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∞–Ω–∞–ª–∏–∑–∞ (—Ü–µ–ª–∏–∫–æ–º –∏–ª–∏ –ø–æ —á–∞—Å—Ç—è–º)\n' +
        '6. –î–æ–∂–¥–∏—Ç–µ—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞\n\n' +
        '–ü—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–µ–∂–∏–º–∞ "–†–∞–∑–±–∏—Ç—å –Ω–∞ —á–∞—Å—Ç–∏", —Ñ–∞–π–ª –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ø–æ—ç—Ç–∞–ø–Ω–æ. –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–∞–º –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ —Å–æ–∑–¥–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —á–∞—Å—Ç–µ–π.';
      
      await sendMessageWithRetry(chatId, helpMessage, getMainMenu());
      break;
    
    case 'üîÑ –û—á–∏—Å—Ç–∏—Ç—å':
      // –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
      userState.currentState = 'main';
      userState.uploadedTextFiles = [];
      userState.promptText = '';
      userState.selectedPrompt = null;
      userState.analysisPrompt = null;
      userState.analysisModel = null;
      userState.combinedTextPath = null;
      userState.analysisResults = null;
      userState.analysisChunkSize = null;
      userState.lastAnalysisModel = null;
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π statusMessage –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
      await sendMessageWithRetry(chatId, '–í—Å–µ —Ç–µ–∫—É—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã. –ü–∞–º—è—Ç—å –±–æ—Ç–∞ –æ—á–∏—â–µ–Ω–∞.', getMainMenu());
      break;
      
    case 'ü§ñ –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å':
      await sendMessageWithRetry(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å LLM –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:', getModelSelectionMenu());
      break;
      
    case 'üí¨ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞–º–∏':
      await sendMessageWithRetry(chatId, '–í–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã:', getPromptsMenu(chatId));
      break;
      
    case '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É':
      if (userState.currentState === 'waiting_for_txt') {
        if (userState.uploadedTextFiles.length === 0) {
          await sendMessageWithRetry(chatId, '–í—ã –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ñ–∞–π–ª –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é.');
          return;
        }
        
        await sendMessageWithRetry(chatId, `–í—ã –∑–∞–≥—Ä—É–∑–∏–ª–∏ ${userState.uploadedTextFiles.length} —Ñ–∞–π–ª(–æ–≤). –û–±—ä–µ–¥–∏–Ω—è—é –∏—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...`);
        
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        const combinedTextPath = await combineTextFiles(chatId, userState.uploadedTextFiles);
        
        if (!combinedTextPath) {
          await sendMessageWithRetry(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
          userState.currentState = 'main';
          await sendMessageWithRetry(chatId, '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?', getMainMenu());
          return;
        }
        
        userState.combinedTextPath = combinedTextPath;
        
        // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π
        await sendMessageWithRetry(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π:', 
          getPromptsMenuForAnalysis(chatId));
        
        userState.currentState = 'analysis_prompt_selection';
      } else {
        await sendMessageWithRetry(chatId, '–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.', getMainMenu());
      }
      break;
      
    case '‚ùå –û—Ç–º–µ–Ω–∞':
      if (userState.currentState === 'waiting_for_txt' || 
          userState.currentState === 'analysis_prompt_selection' ||
          userState.currentState === 'analysis_prompt_input' ||
          userState.currentState === 'analysis_model_selection' ||
          userState.currentState === 'prompt_adding_text' ||
          userState.currentState === 'prompt_adding_name') {
        userState.currentState = 'main';
        userState.uploadedTextFiles = [];
        userState.promptText = ''; // –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ
        await sendMessageWithRetry(chatId, '–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.', getMainMenu());
      } else {
        await sendMessageWithRetry(chatId, '–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.', getMainMenu());
      }
      break;
  }
});

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö callback-–∑–∞–ø—Ä–æ—Å–æ–≤
const processedCallbacks = new Map();

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
bot.on('callback_query', async (callbackQuery) => {
  const chatId = callbackQuery.message.chat.id;
  const data = callbackQuery.data;
  const messageId = callbackQuery.message.message_id;
  const callbackId = callbackQuery.id;
  const userState = initUserState(chatId);
  
  // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ –∏ —Ç–æ–≥–æ –∂–µ callback
  const callbackKey = `${chatId}_${messageId}_${data}`;
  const now = Date.now();
  
  if (processedCallbacks.has(callbackKey)) {
    const lastProcessedTime = processedCallbacks.get(callbackKey);
    // –ï—Å–ª–∏ callback –æ–±—Ä–∞–±–æ—Ç–∞–Ω –º–µ–Ω–µ–µ 5 —Å–µ–∫—É–Ω–¥ –Ω–∞–∑–∞–¥, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
    if (now - lastProcessedTime < 5000) {
      console.log(`–ü—Ä–æ–ø—É—Å–∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ callback: ${callbackKey}`);
      await bot.answerCallbackQuery(callbackId, { text: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –Ω–∞–∂–∏–º–∞–π—Ç–µ –∫–Ω–æ–ø–∫–∏ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ' });
      return;
    }
  }
  
  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ callback
  processedCallbacks.set(callbackKey, now);
  
  // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ Map –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
  setTimeout(() => processedCallbacks.delete(callbackKey), 600000);
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
  if (data.startsWith('model:')) {
    const modelId = data.split(':')[1];
    userState.selectedModel = modelId;
    
    const selectedModel = availableModels.find(m => m.id === modelId);
    await bot.answerCallbackQuery(callbackQuery.id, { text: `–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: ${selectedModel.name}` });
    await bot.editMessageText(`–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–æ–¥–µ–ª—å: ${selectedModel.name} (${selectedModel.price})`, {
      chat_id: chatId,
      message_id: messageId
    });
    
    setTimeout(async () => {
      await sendMessageWithRetry(chatId, '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?', getMainMenu());
    }, 500);
    return;
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
  if (data.startsWith('analysis_model:')) {
    const modelId = data.split(':')[1];
    userState.analysisModel = modelId;
    
    const selectedModel = availableModels.find(m => m.id === modelId);
    await bot.answerCallbackQuery(callbackQuery.id, { text: `–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: ${selectedModel.name}` });
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    const fileStats = fs.statSync(userState.combinedTextPath);
    const fileSizeKB = Math.round(fileStats.size / 1024);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤–º–µ—Å—Ç–æ —Å—Ä–∞–∑—É —Å–≤–æ–¥–∫–∏
    let analysisOptionsText = 'üìã *–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∞–Ω–∞–ª–∏–∑–∞:*\n\n';
    analysisOptionsText += `üìÑ –§–∞–π–ª —Ä–∞–∑–º–µ—Ä–æ–º: ${fileSizeKB} –ö–ë\n`;
    analysisOptionsText += `üí¨ –ü—Ä–æ–º–ø—Ç: ${userState.analysisPrompt?.name || '–í—Ä–µ–º–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç'}\n`;
    analysisOptionsText += `ü§ñ –ú–æ–¥–µ–ª—å: ${selectedModel.name} (${selectedModel.price})\n\n`;
    analysisOptionsText += '–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç:';
    
    try {
      await bot.editMessageText(analysisOptionsText, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–ª–∏–∫–æ–º', callback_data: 'analyze_whole' }],
            [{ text: '‚úÇÔ∏è –†–∞–∑–±–∏—Ç—å –Ω–∞ —á–∞—Å—Ç–∏', callback_data: 'analyze_parts' }]
          ]
        }
      });
      
      userState.currentState = 'analysis_method_selection';
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –æ–ø—Ü–∏–π –∞–Ω–∞–ª–∏–∑–∞:', error);
      
      // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
      let simpleOptionsText = 'üìã *–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∞–Ω–∞–ª–∏–∑–∞:*\n\n';
      simpleOptionsText += `–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç (${fileSizeKB} –ö–ë):`;
      
      await bot.editMessageText(simpleOptionsText, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–ª–∏–∫–æ–º', callback_data: 'analyze_whole' }],
            [{ text: '‚úÇÔ∏è –†–∞–∑–±–∏—Ç—å –Ω–∞ —á–∞—Å—Ç–∏', callback_data: 'analyze_parts' }]
          ]
        }
      });
      
      userState.currentState = 'analysis_method_selection';
    }
    
    return;
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ –∞–Ω–∞–ª–∏–∑–∞ (—Ü–µ–ª–∏–∫–æ–º –∏–ª–∏ –ø–æ —á–∞—Å—Ç—è–º)
  if (data === 'analyze_whole' || data === 'analyze_parts') {
    await bot.answerCallbackQuery(callbackQuery.id, { text: '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞–Ω–∞–ª–∏–∑—É...' });
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    userState.analyzeInParts = (data === 'analyze_parts');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º
    let summaryText = 'üìã *–°–≤–æ–¥–∫–∞ –ø–µ—Ä–µ–¥ –∞–Ω–∞–ª–∏–∑–æ–º:*\n\n';
    summaryText += `üìÑ –§–∞–π–ª–æ–≤ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–æ: ${userState.uploadedTextFiles.length}\n`;
    
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–º–ø—Ç–æ–º
    const promptName = userState.analysisPrompt.name;
    summaryText += `üí¨ –ü—Ä–æ–º–ø—Ç: ${promptName}\n`;
    
    const selectedModel = availableModels.find(m => m.id === userState.analysisModel);
    summaryText += `ü§ñ –ú–æ–¥–µ–ª—å: ${selectedModel.name} (${selectedModel.price})\n`;
    summaryText += `üìä –ú–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞: ${userState.analyzeInParts ? '–†–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏' : '–¶–µ–ª–∏–∫–æ–º'}\n\n`;
    summaryText += '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞.';
    
    try {
      await bot.editMessageText(summaryText, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚úÖ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å', callback_data: 'start_analysis' }]
          ]
        }
      });
      
      userState.currentState = 'analysis_confirmation';
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–≤–æ–¥–∫–∏ –ø–µ—Ä–µ–¥ –∞–Ω–∞–ª–∏–∑–æ–º:', error);
      
      // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–º–ø—Ç–∞
      let simpleSummaryText = 'üìã *–ê–Ω–∞–ª–∏–∑ –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É*\n\n';
      simpleSummaryText += `üìä –ú–µ—Ç–æ–¥: ${userState.analyzeInParts ? '–†–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏' : '–¶–µ–ª–∏–∫–æ–º'}\n\n`;
      simpleSummaryText += '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.';
      
      await bot.editMessageText(simpleSummaryText, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚úÖ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å', callback_data: 'start_analysis' }]
          ]
        }
      });
      
      userState.currentState = 'analysis_confirmation';
    }
    
    return;
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞
  if (data === 'prompt_add') {
    // –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–º–ø—Ç–∞ –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
    userState.currentState = 'prompt_adding_text';
    userState.promptName = null; // –ë—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    userState.promptText = ''; // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
    await bot.answerCallbackQuery(callbackQuery.id);
    await sendMessageWithRetry(chatId, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /done –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "‚úÖ –ì–æ—Ç–æ–≤–æ".', {
      reply_markup: {
        keyboard: [
          [{ text: '‚úÖ –ì–æ—Ç–æ–≤–æ' }],
          [{ text: '‚ùå –û—Ç–º–µ–Ω–∞' }]
        ],
        resize_keyboard: true
      }
    });
    return;
  }
  
  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
  if (data === 'analysis_prompt_add') {
    userState.currentState = 'analysis_prompt_input';
    await bot.answerCallbackQuery(callbackQuery.id);
    await sendMessageWithRetry(chatId, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:');
    return;
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
  if (data.startsWith('analysis_prompt_select:')) {
    const promptIndex = parseInt(data.split(':')[1]);
    const prompts = getUserPrompts(chatId);
    
    if (promptIndex >= 0 && promptIndex < prompts.length) {
      userState.analysisPrompt = prompts[promptIndex];
      await bot.answerCallbackQuery(callbackQuery.id, { text: `–í—ã–±—Ä–∞–Ω –ø—Ä–æ–º–ø—Ç: ${prompts[promptIndex].name}` });
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –º–æ–¥–µ–ª–∏
      userState.currentState = 'analysis_model_selection';
      
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const safePromptText = getSafePromptText(prompts[promptIndex].text);
        const message = `–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: ${prompts[promptIndex].name}\n\n${safePromptText ? '–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–º–ø—Ç–∞:\n' + safePromptText + '\n\n' : ''}–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:`;
        
        await bot.editMessageText(message, {
          chat_id: chatId,
          message_id: messageId,
          reply_markup: getModelSelectionMenu('analysis_model:').reply_markup
        });
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø—Ä–æ–º–ø—Ç–∞:', error);
        
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.editMessageText(`–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: ${prompts[promptIndex].name}\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:`, {
          chat_id: chatId,
          message_id: messageId,
          reply_markup: getModelSelectionMenu('analysis_model:').reply_markup
        });
      }
    }
    return;
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–º–ø—Ç–∞
  if (data.startsWith('prompt_select:')) {
    const promptIndex = parseInt(data.split(':')[1]);
    const prompts = getUserPrompts(chatId);
    
    if (promptIndex >= 0 && promptIndex < prompts.length) {
      userState.selectedPrompt = promptIndex;
      await bot.answerCallbackQuery(callbackQuery.id, { text: `–í—ã–±—Ä–∞–Ω –ø—Ä–æ–º–ø—Ç: ${prompts[promptIndex].name}` });
      
      try {
        // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–º–ø—Ç (–∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∫–∞–∫ —Ñ–∞–π–ª)
        await sendPromptToUser(chatId, prompts[promptIndex].name, prompts[promptIndex].text, messageId);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø—Ä–æ–º–ø—Ç–∞:', error);
        
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç –∫–∞–∫ —Ñ–∞–π–ª
        await bot.editMessageText(`–ü—Ä–æ–º–ø—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è. –û—Ç–ø—Ä–∞–≤–ª—è—é –∫–∞–∫ —Ñ–∞–π–ª...`, {
          chat_id: chatId,
          message_id: messageId
        });
        
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –ø—Ä–æ–º–ø—Ç–∞
        const tempFilePath = path.join(promptsDir, `temp_prompt_${Date.now()}.txt`);
        fs.writeFileSync(tempFilePath, `–ü—Ä–æ–º–ø—Ç: ${prompts[promptIndex].name}\n\n${prompts[promptIndex].text}`, 'utf8');
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        await bot.sendDocument(chatId, fs.createReadStream(tempFilePath), {
          caption: `–ü—Ä–æ–º–ø—Ç: ${prompts[promptIndex].name}`
        });
        
        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        setTimeout(() => {
          try {
            if (fs.existsSync(tempFilePath)) {
              fs.unlinkSync(tempFilePath);
            }
          } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –ø—Ä–æ–º–ø—Ç–∞:', err);
          }
        }, 5000);
      }
      
      setTimeout(async () => {
        await sendMessageWithRetry(chatId, '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?', getMainMenu());
      }, 500);
    }
    return;
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞
  if (data.startsWith('prompt_delete:')) {
    const promptIndex = parseInt(data.split(':')[1]);
    const prompts = getUserPrompts(chatId);
    
    if (promptIndex >= 0 && promptIndex < prompts.length) {
      const promptName = prompts[promptIndex].name;
      prompts.splice(promptIndex, 1);
      
      if (saveUserPrompts(chatId, prompts)) {
        await bot.answerCallbackQuery(callbackQuery.id, { text: `–ü—Ä–æ–º–ø—Ç —É–¥–∞–ª–µ–Ω: ${promptName}` });
        await bot.editMessageText('–í–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã:', {
          chat_id: chatId,
          message_id: messageId,
          reply_markup: getPromptsMenu(chatId).reply_markup
        });
      } else {
        await bot.answerCallbackQuery(callbackQuery.id, { text: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–º–ø—Ç–∞' });
      }
    }
    return;
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
  if (data === 'start_analysis') {
    await bot.answerCallbackQuery(callbackQuery.id, { text: '–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞...' });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
    await bot.editMessageText('‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –º–æ–¥–µ–ª—å. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...\n\n–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –±–æ–ª—å—à–æ–≥–æ –æ–±—ä–µ–º–∞ - –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.', {
      chat_id: chatId,
      message_id: messageId
    });
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Å –ø–æ–º–æ—â—å—é OpenRouter API
    try {
      if (!openrouterApiKey) {
        throw new Error('API –∫–ª—é—á OpenRouter –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env');
      }
      
      if (!userState.combinedTextPath || !fs.existsSync(userState.combinedTextPath)) {
        throw new Error('–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      
      // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
      const textContent = fs.readFileSync(userState.combinedTextPath, 'utf8');
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –º–æ–¥–µ–ª–∏
      const prompt = userState.analysisPrompt.text;
      
      // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
      const fileSize = textContent.length;
      const fileSizeKB = Math.round(fileSize / 1024);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º —Ä–∞–∑–±–∏–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏
      const shouldSplitIntoChunks = userState.analyzeInParts === true;
      
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ä–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ –∏–ª–∏ —Ä–∞–∑–º–µ—Ä –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π
      // –†–∞–∑–º–µ—Ä –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ API - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —á–∞—Å—Ç–∏
      const MAX_SAFE_SIZE = 100500000; // –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 800 –ö–ë –¥–æ 1.5 –ú–ë
      
      if (shouldSplitIntoChunks || fileSize > MAX_SAFE_SIZE) {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–ª —Ä–∞–∑–±–∏–µ–Ω–∏–µ, –Ω–æ —Ä–∞–∑–º–µ—Ä –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π - –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º
        if (!shouldSplitIntoChunks && fileSize > MAX_SAFE_SIZE) {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º
          await bot.editMessageText(`üìä –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (${fileSizeKB} –ö–ë) –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑.\n\n–ù–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º –∞–Ω–∞–ª–∏–∑–∞ —Ü–µ–ª–∏–∫–æ–º, –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω –º–Ω–æ–≥–æ—á–∞—Å—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–∑-–∑–∞ –±–æ–ª—å—à–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —Ç–µ–∫—Å—Ç–∞.\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ –º–µ—Ä–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏...`, {
            chat_id: chatId,
            message_id: messageId
          });
        } else {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –º—É–ª—å—Ç–∏—á–∞—Å—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
          await bot.editMessageText(`üìä –ù–∞—á–∏–Ω–∞–µ–º –º–Ω–æ–≥–æ—á–∞—Å—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ (${fileSizeKB} –ö–ë).\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ –º–µ—Ä–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏...`, {
            chat_id: chatId,
            message_id: messageId
          });
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –ø–æ —á–∞—Å—Ç—è–º
        await analyzeTextInChunks(chatId, messageId, userState.analysisModel, prompt, textContent);
        
        // –°—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        userState.currentState = 'main';
        return;
      }
      
      // –î–ª—è —Ñ–∞–π–ª–æ–≤ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –∏–ª–∏ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "—Ü–µ–ª–∏–∫–æ–º"
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
      await bot.editMessageText(`‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –º–æ–¥–µ–ª—å...\n\n–†–∞–∑–º–µ—Ä –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${fileSizeKB} –ö–ë\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.`, {
        chat_id: chatId,
        message_id: messageId
      });
      
      const fullPrompt = `${prompt}\n\n–í–æ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:\n${textContent}`;
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenRouter API
      const result = await analyzeTextWithLLM(userState.analysisModel, fullPrompt);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ HTML —Ñ–∞–π–ª
      const htmlResult = createHtmlResult(result, {
        model: userState.analysisModel,
        prompt: userState.analysisPrompt.text,
        fileName: path.basename(userState.combinedTextPath)
      });
      
      // –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      const userAnalysisDir = path.join(analysisDir, chatId.toString());
      if (!fs.existsSync(userAnalysisDir)) {
        fs.mkdirSync(userAnalysisDir, { recursive: true });
      }
      const resultPath = path.join(userAnalysisDir, `analysis_result_${Date.now()}.html`);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML —Ñ–∞–π–ª
      fs.writeFileSync(resultPath, htmlResult, 'utf8');
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      try {
        await bot.sendDocument(chatId, fs.createReadStream(resultPath), {
          caption: `–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ (–º–æ–¥–µ–ª—å: ${availableModels.find(m => m.id === userState.analysisModel).name})`
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.editMessageText('‚úÖ –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!', {
          chat_id: chatId,
          message_id: messageId
        });
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞:', error);
        
        // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ, –ø–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        await bot.sendDocument(chatId, fs.createReadStream(resultPath), {
          caption: `–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞`
        });
        
        await bot.editMessageText('‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω (–≤–æ–∑–Ω–∏–∫–ª–∏ –Ω–µ–±–æ–ª—å—à–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞).', {
          chat_id: chatId,
          message_id: messageId
        });
      }
      
      userState.currentState = 'main';
      setTimeout(async () => {
        await sendMessageWithRetry(chatId, '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?', getMainMenu());
      }, 500);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–µ–∫—Å—Ç–∞:', error);
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      let errorMessage = `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: ${error.message}`;
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
      if (error.message.includes('—Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π') || error.message.includes('too large')) {
        errorMessage += '\n\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n' +
          '1. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º "–†–∞–∑–±–∏—Ç—å –Ω–∞ —á–∞—Å—Ç–∏"\n' +
          '2. –£–º–µ–Ω—å—à–∏—Ç–µ –æ–±—ä–µ–º —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n' +
          '3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –±–æ–ª—å—à–∏–π –æ–±—ä–µ–º –¥–∞–Ω–Ω—ã—Ö';
      } else if (error.message.includes('–ø—Ä–µ–≤—ã—à–µ–Ω—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è') || error.message.includes('–≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è')) {
        errorMessage += '\n\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n' +
          '1. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º "–†–∞–∑–±–∏—Ç—å –Ω–∞ —á–∞—Å—Ç–∏"\n' +
          '2. –£–º–µ–Ω—å—à–∏—Ç–µ –æ–±—ä–µ–º —Ç–µ–∫—Å—Ç–∞\n' +
          '3. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ\n' +
          '4. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –º–æ–¥–µ–ª—å —Å –º–µ–Ω—å—à–∏–º–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏';
      }
      
      await bot.editMessageText(errorMessage, {
        chat_id: chatId,
        message_id: messageId
      });
      
      userState.currentState = 'main';
      setTimeout(async () => {
        await sendMessageWithRetry(chatId, '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?', getMainMenu());
      }, 1000);
    }
    
    return;
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—â–µ–≥–æ —Ä–µ–∑—é–º–µ
  if (data.startsWith('summarize:')) {
    await bot.answerCallbackQuery(callbackQuery.id, { text: '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –æ–±—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...' });
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userState = initUserState(chatId);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
      if (!userState.analysisResults || userState.analysisResults.length === 0) {
        throw new Error('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∞–Ω–∞–ª–∏–∑.');
      }
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –¥–ª—è –æ–±—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
      await bot.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:', {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: getModelSelectionMenu('summary_model:').reply_markup
      });
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
      userState.currentState = 'summary_model_selection';
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ –æ–±—â–µ–º—É –∞–Ω–∞–ª–∏–∑—É:', error);
      
      await bot.editMessageText(`‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${error.message}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∞–Ω–∞–ª–∏–∑.`, {
        chat_id: chatId,
        message_id: messageId
      });
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
      setTimeout(async () => {
        await sendMessageWithRetry(chatId, '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?', getMainMenu());
      }, 1000);
    }
    
    return;
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –¥–ª—è –æ–±—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
  if (data.startsWith('summary_model:')) {
    const modelId = data.split(':')[1];
    await bot.answerCallbackQuery(callbackQuery.id, { text: `–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: ${availableModels.find(m => m.id === modelId).name}` });
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    const statusMessage = await bot.sendMessage(chatId, '‚è≥ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ –≤—Å–µ–º —á–∞—Å—Ç—è–º...');
    const statusMessageId = statusMessage.message_id;
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userState = initUserState(chatId);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
      if (!userState.analysisResults || userState.analysisResults.length === 0) {
        throw new Error('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∞–Ω–∞–ª–∏–∑.');
      }
      
      console.log(`–ù–∞–π–¥–µ–Ω–æ ${userState.analysisResults.length} —á–∞—Å—Ç–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞`);
      
      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–ø—Ç, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
      const originalPrompt = userState.analysisPrompt ? userState.analysisPrompt.text : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç';
      
      // –°–æ–∑–¥–∞–µ–º –æ–±—â–∏–π –∞–Ω–∞–ª–∏–∑, –∏—Å–ø–æ–ª—å–∑—É—è –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –º–æ–¥–µ–ª—å
      const summaryPath = await createSummaryFromResults(
        chatId, 
        statusMessageId, 
        modelId,
        userState.analysisResults, 
        originalPrompt
      );
      
      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const selectedModel = availableModels.find(m => m.id === modelId);
      const modelName = selectedModel ? selectedModel.name : modelId;
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Å –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º
      await bot.sendDocument(chatId, fs.createReadStream(summaryPath), {
        caption: `üìä –û–ë–©–ò–ô –ê–ù–ê–õ–ò–ó\n\n–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ ${userState.analysisResults.length} —á–∞—Å—Ç–µ–π —Ç–µ–∫—Å—Ç–∞\n–ú–æ–¥–µ–ª—å: ${modelName}`
      });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      await bot.editMessageText('‚úÖ –û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –µ–≥–æ –≤—ã—à–µ.', {
        chat_id: chatId,
        message_id: statusMessageId
      });
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
      setTimeout(async () => {
        await sendMessageWithRetry(chatId, '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?', getMainMenu());
      }, 1000);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:', error);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      await bot.editMessageText(`‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: ${error.message}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.`, {
        chat_id: chatId,
        message_id: statusMessageId
      });
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
      setTimeout(async () => {
        await sendMessageWithRetry(chatId, '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?', getMainMenu());
      }, 1000);
    }
    
    return;
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º"
  if (data.startsWith('analyze:')) {
    const fileName = data.split(':')[1];
    await bot.answerCallbackQuery(callbackQuery.id, { text: '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞–Ω–∞–ª–∏–∑—É...' });
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    const filePath = path.join(userOutputDir, fileName);
    
    if (!fs.existsSync(filePath)) {
      await bot.editMessageText('‚ùå –§–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é.', {
        chat_id: chatId,
        message_id: messageId
      });
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const fileStats = fs.statSync(filePath);
    const fileSizeKB = Math.round(fileStats.size / 1024);
    
    // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä —Ä–∞–∑–º–µ—Ä–∞ –∞–Ω–∞–ª–∏–∑–∞
    await bot.editMessageText(`–§–∞–π–ª "${fileName}" (${fileSizeKB} –ö–ë) –≥–æ—Ç–æ–≤ –∫ –∞–Ω–∞–ª–∏–∑—É.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∞–Ω–∞–ª–∏–∑–∞:`, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: getAnalysisSizeMenu(fileName).reply_markup
    });
    
    return;
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ –∞–Ω–∞–ª–∏–∑–∞
  if (data.startsWith('analyze_full:') || data.startsWith('analyze_medium:') || data.startsWith('analyze_small:')) {
    const parts = data.split(':');
    const analysisType = parts[0];
    const fileName = parts[1];
    
    await bot.answerCallbackQuery(callbackQuery.id, { text: '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞–Ω–∞–ª–∏–∑—É...' });
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    const filePath = path.join(userOutputDir, fileName);
    
    if (!fs.existsSync(filePath)) {
      await bot.editMessageText('‚ùå –§–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é.', {
        chat_id: chatId,
        message_id: messageId
      });
      return;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–∞—Å—Å–∏–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    userState.uploadedTextFiles = [filePath];
    userState.combinedTextPath = filePath;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —á–∞—Å—Ç–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    if (analysisType === 'analyze_small') {
      userState.analysisChunkSize = 300000; // ~300KB
    } else if (analysisType === 'analyze_medium') {
      userState.analysisChunkSize = 900000; // ~900KB
    } else {
      userState.analysisChunkSize = 1100000; // ~1.1MB
    }
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    userState.currentState = 'analysis_prompt_selection';
    
    await bot.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π:', {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: getPromptsMenuForAnalysis(chatId).reply_markup
    });
    
    return;
  }
  
  await bot.answerCallbackQuery(callbackQuery.id);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
bot.on('document', async (msg) => {
  const chatId = msg.chat.id;
  const fileId = msg.document.file_id;
  const fileName = msg.document.file_name;
  const userState = initUserState(chatId);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–æ–π —Ñ–∞–π–ª –º—ã –æ–∂–∏–¥–∞–µ–º –ø–æ —Ç–µ–∫—É—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
  if (userState.currentState === 'waiting_for_txt') {
    // –û–∂–∏–¥–∞–µ–º .txt —Ñ–∞–π–ª—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    if (!fileName.toLowerCase().endsWith('.txt')) {
      await sendMessageWithRetry(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .txt');
      return;
    }
    
    // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    try {
      const fileInfo = await getFileWithRetry(fileId);
      if (!fileInfo) {
        await sendMessageWithRetry(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        return;
      }
      
      const fileUrl = `https://api.telegram.org/file/bot${token}/${fileInfo.file_path}`;
      
      // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
      const userAnalysisDir = path.join(analysisDir, chatId.toString());
      if (!fs.existsSync(userAnalysisDir)) {
        fs.mkdirSync(userAnalysisDir, { recursive: true });
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
      const textFilePath = path.join(userAnalysisDir, fileName);
      await downloadFileWithRetry(fileUrl, textFilePath);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö
      userState.uploadedTextFiles.push(textFilePath);
      
      await sendMessageWithRetry(chatId, `‚úÖ –§–∞–π–ª "${fileName}" –∑–∞–≥—Ä—É–∂–µ–Ω (${userState.uploadedTextFiles.length} –≤—Å–µ–≥–æ). –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –Ω–∞–∂–∞—Ç—å "–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É".`);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞:', err);
      await sendMessageWithRetry(chatId, `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: ${err.message}`);
    }
    
    return;
  } else if (userState.currentState === 'waiting_for_file') {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞, –∫–æ–≥–¥–∞ –æ–∂–∏–¥–∞–µ–º ZIP –∏–ª–∏ RAR
    if (!fileName.toLowerCase().endsWith('.zip') && !fileName.toLowerCase().endsWith('.rar')) {
      await sendMessageWithRetry(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .zip –∏–ª–∏ .rar');
      return;
    }
    
    // –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –≤–µ—Ä–Ω—ã–π, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
  } else {
    // –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –æ–∂–∏–¥–∞–µ—Ç —Ñ–∞–π–ª–∞, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç - 
    // –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–µ–π—Å—Ç–≤–∏–π
    if (fileName.toLowerCase().endsWith('.zip') || fileName.toLowerCase().endsWith('.rar')) {
      await sendMessageWithRetry(chatId, '–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å ZIP –∏–ª–∏ RAR –∞—Ä—Ö–∏–≤", –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—Ä—Ö–∏–≤.', getMainMenu());
    } else if (fileName.toLowerCase().endsWith('.txt')) {
      await sendMessageWithRetry(chatId, '–î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ .txt —Ñ–∞–π–ª–æ–≤ —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üìä –ê–Ω–∞–ª–∏–∑".', getMainMenu());
    } else {
      await sendMessageWithRetry(chatId, '–Ø –Ω–µ –∑–Ω–∞—é, —á—Ç–æ –¥–µ–ª–∞—Ç—å —Å —ç—Ç–∏–º —Ñ–∞–π–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –¥–ª—è –Ω—É–∂–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.', getMainMenu());
    }
    userState.currentState = 'main';
    return;
  }
  
  // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â—É—é –ø—Ä–æ–≤–µ—Ä–∫—É, —Ç.–∫. –æ–Ω–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤—ã—à–µ –≤ –±–ª–æ–∫–µ waiting_for_file
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  userState.currentState = 'processing';
  
  let statusMessage = await sendMessageWithRetry(chatId, '–ü–æ–ª—É—á–µ–Ω –∞—Ä—Ö–∏–≤. –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...');
  const statusMessageId = statusMessage?.message_id;
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
    const fileInfo = await getFileWithRetry(fileId);
    if (!fileInfo) {
      await updateStatusMessage(chatId, statusMessageId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      userState.currentState = 'main';
      return;
    }
    
    const fileUrl = `https://api.telegram.org/file/bot${token}/${fileInfo.file_path}`;
    
    // –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—Ä—Ö–∏–≤–∞
    const zipPath = path.join(uploadsDir, fileName);
    
    // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/—Å–æ–æ–±—â–µ–Ω–∏—è
    const userExtractDir = path.join(extractDir, chatId.toString(), Date.now().toString());
    const userOutputDir = path.join(outputDir, chatId.toString());
    
    if (!fs.existsSync(userExtractDir)) {
      fs.mkdirSync(userExtractDir, { recursive: true });
    }
    
    if (!fs.existsSync(userOutputDir)) {
      fs.mkdirSync(userOutputDir, { recursive: true });
    }
    
    // –°–∫–∞—á–∏–≤–∞–µ–º –∞—Ä—Ö–∏–≤
    await updateStatusMessage(chatId, statusMessageId, '‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞—é –∞—Ä—Ö–∏–≤...');
    
    try {
      // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
      await downloadFileWithRetry(fileUrl, zipPath);
      
      await updateStatusMessage(chatId, statusMessageId, 'üìÇ –ê—Ä—Ö–∏–≤ —Å–∫–∞—á–∞–Ω. –ò–∑–≤–ª–µ–∫–∞—é —Ñ–∞–π–ª—ã...');
      
      // –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∞—Ä—Ö–∏–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ–≥–æ —Ç–∏–ø–∞
      let extractionSuccess = false;
      
      if (fileName.toLowerCase().endsWith('.zip')) {
        // –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º ZIP –∞—Ä—Ö–∏–≤
        try {
          const zip = new AdmZip(zipPath);
          zip.extractAllTo(userExtractDir, true);
          extractionSuccess = true;
        } catch (err) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–µ ZIP –∞—Ä—Ö–∏–≤–∞:', err);
          await updateStatusMessage(chatId, statusMessageId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–µ ZIP –∞—Ä—Ö–∏–≤–∞.');
        }
      } else if (fileName.toLowerCase().endsWith('.rar')) {
        // –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º RAR –∞—Ä—Ö–∏–≤
        try {
          extractionSuccess = await extractRarArchive(zipPath, userExtractDir);
          if (!extractionSuccess) {
            await updateStatusMessage(chatId, statusMessageId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–µ RAR –∞—Ä—Ö–∏–≤–∞.');
          }
        } catch (err) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–µ RAR –∞—Ä—Ö–∏–≤–∞:', err);
          await updateStatusMessage(chatId, statusMessageId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–µ RAR –∞—Ä—Ö–∏–≤–∞.');
        }
      }
      
      if (!extractionSuccess) {
        userState.currentState = 'main';
        await sendMessageWithRetry(chatId, '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?', getMainMenu());
        return;
      }
      
      await updateStatusMessage(chatId, statusMessageId, 'üîç –§–∞–π–ª—ã –∏–∑–≤–ª–µ—á–µ–Ω—ã. –ò—â—É HTML-—Ñ–∞–π–ª—ã...');
      
      // –ò—â–µ–º HTML-—Ñ–∞–π–ª—ã –≤ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      const htmlFiles = findHtmlFiles(userExtractDir);
      
      if (htmlFiles.length === 0) {
        await updateStatusMessage(chatId, statusMessageId, '‚ùå HTML-—Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∞—Ä—Ö–∏–≤–µ.');
        userState.currentState = 'main';
        await sendMessageWithRetry(chatId, '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?', getMainMenu());
        return;
      }
      
      await updateStatusMessage(chatId, statusMessageId, `üîÑ –ù–∞–π–¥–µ–Ω–æ ${htmlFiles.length} HTML-—Ñ–∞–π–ª–æ–≤. –ù–∞—á–∏–Ω–∞—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é...`);
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π HTML-—Ñ–∞–π–ª
      const results = [];
      const batchSize = 20; // –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
      let processedCount = 0;
      
      for (let i = 0; i < htmlFiles.length; i++) {
        const htmlFile = htmlFiles[i];
        const basename = path.basename(htmlFile, '.html');
        const outputPath = path.join(userOutputDir, `${basename}.json`);
        
        processedCount++;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞–∫–µ—Ç–∞ –∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ñ–∞–π–ª–∞
        if (processedCount % batchSize === 0 || processedCount === htmlFiles.length) {
          const progressPercent = Math.round((processedCount / htmlFiles.length) * 100);
          await updateStatusMessage(
            chatId, 
            statusMessageId, 
            `üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è: ${progressPercent}% (${processedCount}/${htmlFiles.length})`
          );
        }
        
        try {
          processSingleFile(htmlFile, outputPath);
          if (fs.existsSync(outputPath)) {
            results.push(outputPath);
          }
        } catch (err) {
          console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ ${basename}:`, err);
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å –æ–¥–Ω–∏–º —Ñ–∞–π–ª–æ–º
        }
      }
      
      // –°–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –≤–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–∂–¥–æ–≥–æ JSON –æ—Ç–¥–µ–ª—å–Ω–æ
      await updateStatusMessage(chatId, statusMessageId, `‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–æ–∑–¥–∞—é –∏—Ç–æ–≥–æ–≤—ã–π —Ñ–∞–π–ª...`);
      
      if (results.length > 0) {
        // –®–∞–≥ 1: –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ JSON —Ñ–∞–π–ª—ã –≤ –æ–¥–∏–Ω –º–∞—Å—Å–∏–≤
        let allMessages = [];
        
        for (const jsonFilePath of results) {
          try {
            const jsonContent = fs.readFileSync(jsonFilePath, 'utf8');
            const messages = JSON.parse(jsonContent);
            allMessages = allMessages.concat(messages);
          } catch (err) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ ${jsonFilePath}:`, err);
          }
        }
        
        console.log(`–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${allMessages.length}`);
        
        // –®–∞–≥ 2: –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ ID
        allMessages.sort((a, b) => {
          return parseInt(a.id) - parseInt(b.id);
        });
        
        // –®–∞–≥ 3: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ –ª–æ–≥–∏–∫–µ –∏–∑ converter.js)
        // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π –¥–∞—Ç—ã
        let previousDate = '';
        
        // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        const formattedMessagesArray = [];
        
        // –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        let emptySeparatorsAdded = 0;
        let messagesWithoutText = 0;
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        allMessages.forEach(message => {
          // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —Å –ø—É—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º
          if (!message.text || message.text.trim() === '') {
            messagesWithoutText++;
            return;
          }
          
          // –ó–∞–º–µ–Ω—è–µ–º –∏–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π
          let sender = message.sender;
          if (sender && sender.includes(' ')) {
            // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –≤—Ç–æ—Ä—É—é —á–∞—Å—Ç—å –∏–º–µ–Ω–∏ (—Ñ–∞–º–∏–ª–∏—é) –¥–ª—è –ª—é–±–æ–≥–æ –∏–º–µ–Ω–∏ —Å –ø—Ä–æ–±–µ–ª–æ–º
            sender = sender.split(' ')[1];
          } else if (sender === '–í—ã') {
            sender = '–ê–Ω–¥—Ä–µ–π';
          }
          
          // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏ –¥–∞—Ç—ã
          let currentDate = '';
          
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç—ã
          if (message.date) {
            // –í—ã–¥–µ–ª—è–µ–º —á–∞—Å—Ç—å –¥–∞—Ç—ã –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏
            let dateStr = message.date;
            if (dateStr.includes('–≤')) {
              // –ò–∑ —Ñ–æ—Ä–º–∞—Ç–∞ "–í—ã, 17 –∏—é–Ω 2018 –≤ 16:53:48" –∏–ª–∏ "17 –∏—é–Ω 2018 –≤ 16:53:25"
              // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ "17 –∏—é–Ω 2018"
              dateStr = dateStr.split('–≤')[0].trim();
              if (dateStr.startsWith('–í—ã, ')) {
                dateStr = dateStr.substring(4).trim(); // –£–±–∏—Ä–∞–µ–º "–í—ã, "
              }
            }
            currentDate = dateStr;
          }
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ –¥–µ–Ω—å
          if (currentDate && previousDate && currentDate !== previousDate) {
            // –ï—Å–ª–∏ –¥–µ–Ω—å –∏–∑–º–µ–Ω–∏–ª—Å—è, –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è —á–µ—Ç–∫–æ–≥–æ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –æ—Ç–¥–µ–ª–µ–Ω–∏—è
            formattedMessagesArray.push('');
            formattedMessagesArray.push(`${currentDate}`);
            formattedMessagesArray.push('');
            emptySeparatorsAdded++;
          }
          
          // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –º–∞—Å—Å–∏–≤
          formattedMessagesArray.push(`${sender}   ${message.text}`);
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∫–∞–∫ –ø—Ä–µ–¥—ã–¥—É—â—É—é –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
          if (currentDate) {
            previousDate = currentDate;
          }
        });
        
        // –°–æ–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫
        const formattedMessages = formattedMessagesArray.join('\n');
        
        // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        console.log(`–î–æ–±–∞–≤–ª–µ–Ω–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π –¥–Ω–µ–π: ${emptySeparatorsAdded}`);
        console.log(`–ü—Ä–æ–ø—É—â–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑ —Ç–µ–∫—Å—Ç–∞: ${messagesWithoutText}`);
        
        // –ü—É—Ç—å –∫ –∏—Ç–æ–≥–æ–≤–æ–º—É —Ñ–∞–π–ª—É
        const outputBaseName = path.basename(fileName, '.zip');
        const finalOutputPath = path.join(userOutputDir, `${outputBaseName}.txt`);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ñ–∞–π–ª
        fs.writeFileSync(finalOutputPath, formattedMessages, 'utf8');
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏—Ç–æ–≥–æ–≤—ã–π —Ñ–∞–π–ª
        await updateStatusMessage(chatId, statusMessageId, `‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...`);
        
        try {
          // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –ø—Ä–æ–º–ø—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
          const prompts = getUserPrompts(chatId);
          let replyMarkup = null;
          
          if (userState.selectedPrompt !== null && prompts.length > userState.selectedPrompt) {
            // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
            replyMarkup = {
              inline_keyboard: [
                [{ text: 'üìä –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º', callback_data: `analyze:${path.basename(finalOutputPath)}` }]
              ]
            };
          }
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
          await bot.sendDocument(chatId, fs.createReadStream(finalOutputPath), {
            caption: `–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ (${allMessages.length} —Å–æ–æ–±—â–µ–Ω–∏–π)`,
            reply_markup: replyMarkup
          });
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–µ–ª—å, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞
          const modelText = userState.selectedModel 
            ? `\n\n–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: ${availableModels.find(m => m.id === userState.selectedModel).name}`
            : '';
            
          const promptText = userState.selectedPrompt !== null && prompts.length > userState.selectedPrompt
            ? `\n–í—ã–±—Ä–∞–Ω –ø—Ä–æ–º–ø—Ç: ${prompts[userState.selectedPrompt].name}`
            : '';
          
          await updateStatusMessage(chatId, statusMessageId, `‚úÖ –ì–æ—Ç–æ–≤–æ! –§–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.${modelText}${promptText}`);
          
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
          userState.currentState = 'main';
          setTimeout(async () => {
            await sendMessageWithRetry(chatId, '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?', getMainMenu());
          }, 1000);
          
        } catch (err) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞:', err);
          await updateStatusMessage(chatId, statusMessageId, `‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Ç–æ–≥–æ–≤—ã–π —Ñ–∞–π–ª: ${err.message}`);
          userState.currentState = 'main';
          setTimeout(async () => {
            await sendMessageWithRetry(chatId, '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?', getMainMenu());
          }, 1000);
        }
      } else {
        await updateStatusMessage(chatId, statusMessageId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞. –í–æ–∑–º–æ–∂–Ω–æ, –≤ —Ñ–∞–π–ª–∞—Ö –Ω–µ—Ç –Ω—É–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.');
        userState.currentState = 'main';
        setTimeout(async () => {
          await sendMessageWithRetry(chatId, '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?', getMainMenu());
        }, 1000);
      }
      
      // –ß–∏—Å—Ç–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
      setTimeout(() => {
        try {
          if (fs.existsSync(zipPath)) fs.unlinkSync(zipPath);
          deleteDirectory(userExtractDir);
        } catch (err) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:', err);
        }
      }, 5000);
      
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—Ä—Ö–∏–≤–∞:', err);
      await updateStatusMessage(chatId, statusMessageId, `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—Ä—Ö–∏–≤–∞: ${err.message}`);
      userState.currentState = 'main';
      setTimeout(async () => {
        await sendMessageWithRetry(chatId, '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?', getMainMenu());
      }, 1000);
    }
    
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞:', err);
    await updateStatusMessage(chatId, statusMessageId, `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${err.message}`);
    userState.currentState = 'main';
    setTimeout(async () => {
      await sendMessageWithRetry(chatId, '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?', getMainMenu());
    }, 1000);
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ HTML-—Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (—Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ)
function findHtmlFiles(dir) {
  let results = [];
  
  const items = fs.readdirSync(dir);
  
  for (const item of items) {
    const itemPath = path.join(dir, item);
    const stat = fs.statSync(itemPath);
    
    if (stat.isDirectory()) {
      results = results.concat(findHtmlFiles(itemPath));
    } else if (item.toLowerCase().endsWith('.html')) {
      results.push(itemPath);
    }
  }
  
  return results;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
function deleteDirectory(dir) {
  if (fs.existsSync(dir)) {
    fs.readdirSync(dir).forEach(file => {
      const curPath = path.join(dir, file);
      
      if (fs.lstatSync(curPath).isDirectory()) {
        // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        deleteDirectory(curPath);
      } else {
        // –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        fs.unlinkSync(curPath);
      }
    });
    
    fs.rmdirSync(dir);
  }
}

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
const messageTracker = new Map();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
async function sendMessageWithRetry(chatId, text, options = {}, retries = MAX_RETRIES) {
  // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  const messageKey = `${chatId}_${text.substring(0, 50)}`;
  const now = Date.now();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ —Ç–∞–∫–æ–µ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–µ–¥–∞–≤–Ω–æ
  if (messageTracker.has(messageKey)) {
    const lastSentTime = messageTracker.get(messageKey);
    // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω–µ–µ 2 —Å–µ–∫—É–Ω–¥ –Ω–∞–∑–∞–¥, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
    if (now - lastSentTime < 2000) {
      console.log(`–ü—Ä–æ–ø—É—Å–∫ –¥—É–±–ª–∏—Ä—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è ${chatId}: "${text.substring(0, 50)}..."`);
      return null;
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –µ–≥–æ –æ–±—Ä–µ–∑–∫–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
  const maxTelegramMsgLength = 4000; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram (—Å –∑–∞–ø–∞—Å–æ–º)
  let safeText = text;
  
  if (text && text.length > maxTelegramMsgLength) {
    console.warn(`–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (${text.length} —Å–∏–º–≤–æ–ª–æ–≤). –û–±—Ä–µ–∑–∞–µ–º –¥–æ ${maxTelegramMsgLength} —Å–∏–º–≤–æ–ª–æ–≤.`);
    safeText = text.substring(0, maxTelegramMsgLength - 100) + "...\n\n[–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏ –±—ã–ª–æ –æ–±—Ä–µ–∑–∞–Ω–æ]";
  }
  
  try {
    const result = await bot.sendMessage(chatId, safeText, options);
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    messageTracker.set(messageKey, now);
    // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ç—Ä–µ–∫–µ—Ä–∞
    setTimeout(() => messageTracker.delete(messageKey), 10000);
    return result;
  } catch (error) {
    if (error.description && error.description.includes('MESSAGE_TOO_LONG')) {
      console.error('–û—à–∏–±–∫–∞ MESSAGE_TOO_LONG –¥–∞–∂–µ –ø–æ—Å–ª–µ –æ–±—Ä–µ–∑–∫–∏. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é.');
      // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å—ë –µ—â—ë —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      const result = await bot.sendMessage(chatId, "[–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.]", options);
      messageTracker.set(messageKey, now);
      return result;
    }
    
    if (retries > 0) {
      console.log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ (–æ—Å—Ç–∞–ª–æ—Å—å ${retries}): ${error.message}`);
      await new Promise(resolve => setTimeout(resolve, RETRY_DELAY));
      return sendMessageWithRetry(chatId, safeText, options, retries - 1);
    } else {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫:', error);
      return null;
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–ª–∏–Ω—ã
async function updateStatusMessage(chatId, messageId, text, retries = MAX_RETRIES) {
  if (!messageId) return;
  
  // –ó–∞—â–∏—Ç–∞ –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  const now = Date.now();
  const messageKey = `status_${chatId}_${messageId}`;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ
  if (messageTracker.has(messageKey)) {
    const lastUpdateTime = messageTracker.get(messageKey);
    if (now - lastUpdateTime < 1000) { // –ò–Ω—Ç–µ—Ä–≤–∞–ª 1 —Å–µ–∫—É–Ω–¥–∞
      console.log(`–ü—Ä–æ–ø—É—Å–∫ —á–∞—Å—Ç–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ${messageId}`);
      return null;
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –µ–≥–æ –æ–±—Ä–µ–∑–∫–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
  const maxTelegramMsgLength = 4000; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram (—Å –∑–∞–ø–∞—Å–æ–º)
  let safeText = text;
  
  if (text && text.length > maxTelegramMsgLength) {
    console.warn(`–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (${text.length} —Å–∏–º–≤–æ–ª–æ–≤). –û–±—Ä–µ–∑–∞–µ–º –¥–æ ${maxTelegramMsgLength} —Å–∏–º–≤–æ–ª–æ–≤.`);
    safeText = text.substring(0, maxTelegramMsgLength - 100) + "...\n\n[–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏ –±—ã–ª–æ –æ–±—Ä–µ–∑–∞–Ω–æ]";
  }
  
  try {
    const result = await bot.editMessageText(safeText, {
      chat_id: chatId,
      message_id: messageId
    });
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    messageTracker.set(messageKey, now);
    
    return result;
  } catch (error) {
    // –û—Å–æ–±–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –æ—à–∏–±–∫–∏ "message to edit not found"
    if (error.description && (
        error.description.includes('message to edit not found') || 
        error.description.includes('message is not modified'))) {
      console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ ${messageId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è`);
      return null;
    }
    
    if (error.description && error.description.includes('MESSAGE_TOO_LONG')) {
      console.error('–û—à–∏–±–∫–∞ MESSAGE_TOO_LONG –¥–∞–∂–µ –ø–æ—Å–ª–µ –æ–±—Ä–µ–∑–∫–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.');
      // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å—ë –µ—â—ë —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
      try {
        return await bot.editMessageText("[–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è]", {
          chat_id: chatId,
          message_id: messageId
        });
      } catch (innerError) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–∂–µ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º:', innerError.message);
        return null;
      }
    }
    
    if (retries > 0) {
      console.log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ (–æ—Å—Ç–∞–ª–æ—Å—å ${retries}): ${error.message}`);
      await new Promise(resolve => setTimeout(resolve, RETRY_DELAY));
      return updateStatusMessage(chatId, messageId, safeText, retries - 1);
    } else {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫:', error);
      return null;
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
async function getFileWithRetry(fileId, retries = MAX_RETRIES) {
  try {
    return await bot.getFile(fileId);
  } catch (error) {
    if (retries > 0) {
      console.log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ (–æ—Å—Ç–∞–ª–æ—Å—å ${retries}): ${error.message}`);
      await new Promise(resolve => setTimeout(resolve, RETRY_DELAY));
      return getFileWithRetry(fileId, retries - 1);
    } else {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫:', error);
      return null;
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
function downloadFileWithRetry(url, destination, retries = MAX_RETRIES) {
  return new Promise((resolve, reject) => {
    const https = require('https');
    const file = fs.createWriteStream(destination);
    
    const request = https.get(url, function(response) {
      response.pipe(file);
      
      file.on('finish', function() {
        file.close(() => resolve());
      });
      
      file.on('error', function(err) {
        fs.unlinkSync(destination);
        
        if (retries > 0) {
          console.log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ (–æ—Å—Ç–∞–ª–æ—Å—å ${retries}): ${err.message}`);
          setTimeout(() => {
            downloadFileWithRetry(url, destination, retries - 1)
              .then(resolve)
              .catch(reject);
          }, RETRY_DELAY);
        } else {
          console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫:', err);
          reject(err);
        }
      });
    });
    
    request.on('error', function(err) {
      if (fs.existsSync(destination)) {
        fs.unlinkSync(destination);
      }
      
      if (retries > 0) {
        console.log(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ (–æ—Å—Ç–∞–ª–æ—Å—å ${retries}): ${err.message}`);
        setTimeout(() => {
          downloadFileWithRetry(url, destination, retries - 1)
            .then(resolve)
            .catch(reject);
        }, RETRY_DELAY);
      } else {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫:', err);
        reject(err);
      }
    });
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
async function sendFilesWithRetry(chatId, filePaths, retries = MAX_RETRIES) {
  try {
    // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–æ–≥–æ —Ñ–∞–π–ª–æ–≤, –ª—É—á—à–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—Ä—Ö–∏–≤
    if (filePaths.length > 10) {
      const zipPath = path.join(uploadsDir, `results_${Date.now()}.zip`);
      const zip = new AdmZip();
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –≤ –∞—Ä—Ö–∏–≤
      filePaths.forEach(filePath => {
        if (fs.existsSync(filePath)) {
          zip.addLocalFile(filePath);
        }
      });
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—Ä—Ö–∏–≤
      zip.writeZip(zipPath);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—Ä—Ö–∏–≤
      return await bot.sendDocument(chatId, fs.createReadStream(zipPath), {
        caption: `–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ (${filePaths.length} —Ñ–∞–π–ª–æ–≤)`
      });
    }
    
    // –î–ª—è –º–µ–Ω—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–¥—Ö–æ–¥
    const media = filePaths.map(filePath => ({
      type: 'document',
      media: fs.createReadStream(filePath),
      caption: `–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${path.basename(filePath)}`
    }));
    
    // –ï—Å–ª–∏ —Ñ–∞–π–ª —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω
    if (media.length === 1) {
      return await bot.sendDocument(chatId, media[0].media, {
        caption: media[0].caption
      });
    } 
    // –ï—Å–ª–∏ —Ñ–∞–π–ª–æ–≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
    else {
      return await bot.sendMediaGroup(chatId, media);
    }
  } catch (error) {
    if (retries > 0) {
      console.log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–æ–≤. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ (–æ—Å—Ç–∞–ª–æ—Å—å ${retries}): ${error.message}`);
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ Too Many Requests
      const delay = error.message.includes('Too Many Requests') 
        ? extractRetryAfter(error.message) * 1000 + 500 // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ 0.5 —Å–µ–∫—É–Ω–¥—ã
        : RETRY_DELAY;
      
      await new Promise(resolve => setTimeout(resolve, delay));
      return sendFilesWithRetry(chatId, filePaths, retries - 1);
    } else {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫:', error);
      
      // –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ, –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ –æ–¥–Ω–æ–º—É
      try {
        for (const filePath of filePaths) {
          if (fs.existsSync(filePath)) {
            await bot.sendDocument(chatId, fs.createReadStream(filePath), {
              caption: `–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${path.basename(filePath)}`
            });
            // –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
            await new Promise(resolve => setTimeout(resolve, 3000));
          }
        }
        return true;
      } catch (err) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã –¥–∞–∂–µ –ø–æ –æ–¥–Ω–æ–º—É:', err);
        return null;
      }
    }
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
function extractRetryAfter(errorMessage) {
  const match = errorMessage.match(/retry after (\d+)/i);
  return match ? parseInt(match[1], 10) : 10; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 10 —Å–µ–∫—É–Ω–¥
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–Ω—é –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
function getPromptsMenuForAnalysis(chatId) {
  const userPromptsFile = path.join(promptsDir, `${chatId}.json`);
  let prompts = [];
  
  if (fs.existsSync(userPromptsFile)) {
    try {
      prompts = JSON.parse(fs.readFileSync(userPromptsFile, 'utf8'));
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –ø—Ä–æ–º–ø—Ç–æ–≤:', err);
    }
  }
  
  const inlineKeyboard = [];
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ–º–ø—Ç—ã
  prompts.forEach((prompt, index) => {
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∏–º–µ–Ω–∏ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const promptName = prompt.name.length > 20 ? prompt.name.substring(0, 20) + '...' : prompt.name;
    inlineKeyboard.push([
      { text: promptName, callback_data: `analysis_prompt_select:${index}` }
    ]);
  });
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
  inlineKeyboard.push([{ text: '‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç', callback_data: 'analysis_prompt_add' }]);
  
  return {
    reply_markup: {
      inline_keyboard: inlineKeyboard
    }
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
async function combineTextFiles(chatId, filePaths) {
  if (!filePaths || filePaths.length === 0) return null;
  
  try {
    const userAnalysisDir = path.join(analysisDir, chatId.toString());
    const combinedFilePath = path.join(userAnalysisDir, `combined_${Date.now()}.txt`);
    
    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    let combinedContent = '';
    
    // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    for (const filePath of filePaths) {
      if (fs.existsSync(filePath)) {
        const content = fs.readFileSync(filePath, 'utf8');
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —Ñ–∞–π–ª–∞–º–∏
        if (combinedContent.length > 0) {
          combinedContent += '\n\n=== –ù–û–í–´–ô –§–ê–ô–õ ===\n\n';
        }
        
        combinedContent += content;
      }
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
    fs.writeFileSync(combinedFilePath, combinedContent, 'utf8');
    
    return combinedFilePath;
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤:', err);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é LLM —á–µ—Ä–µ–∑ OpenRouter API
async function analyzeTextWithLLM(modelId, prompt) {
  try {
    console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –º–æ–¥–µ–ª–∏ ${modelId}`);
    console.log(`–î–ª–∏–Ω–∞ –ø—Ä–æ–º–ø—Ç–∞: ${prompt.length} —Å–∏–º–≤–æ–ª–æ–≤`);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—á–µ–Ω—å –±–æ–ª—å—à–∏–µ –ø—Ä–æ–º–ø—Ç—ã
    if (prompt.length > 1000000) {
      console.warn(`–í–ù–ò–ú–ê–ù–ò–ï: –ü—Ä–æ–º–ø—Ç –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π (${prompt.length} —Å–∏–º–≤–æ–ª–æ–≤). API –º–æ–∂–µ—Ç –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–∞–∫–æ–π –æ–±—ä–µ–º –¥–∞–Ω–Ω—ã—Ö.`);
    }
    
    // –ó–∞–ø—Ä–æ—Å –∫ OpenRouter API - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç –∫–∞–∫ –µ—Å—Ç—å, –±–µ–∑ –æ–±—Ä–µ–∑–∫–∏
    const response = await axios.post('https://openrouter.ai/api/v1/chat/completions', {
      model: modelId,
      messages: [
        { role: 'user', content: prompt }
      ]
    }, {
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${openrouterApiKey}`,
        'HTTP-Referer': 'https://t.me', // –î–æ–º–µ–Ω —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞
        'X-Title': 'Telegram Chat Analysis Bot' // –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      },
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –±–æ–ª—å—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
      timeout: 300000 // 5 –º–∏–Ω—É—Ç
    });
    
    // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –æ—Ç–≤–µ—Ç–µ
    console.log('–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç OpenRouter API:');
    console.log('–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);
    console.log('–ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:', response.headers);
    console.log('–î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', JSON.stringify(response.data).substring(0, 500) + '...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ
    if (!response.data || !response.data.choices || !response.data.choices[0] || !response.data.choices[0].message) {
      console.error('–ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API:', response.data);
      throw new Error('API –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–º–ø—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.');
    }
    
    console.log('–ú–æ–¥–µ–ª—å:', response.data.model || '–ù–µ —É–∫–∞–∑–∞–Ω–∞');
    console.log('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:', response.data.usage || '–ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞');
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
    const assistantMessage = response.data.choices[0]?.message?.content;
    
    if (!assistantMessage) {
      throw new Error('–ú–æ–¥–µ–ª—å –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–µ–≤—ã—à–µ–Ω—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è API.');
    }
    
    return {
      model: response.data.model || modelId,
      response: assistantMessage,
      usage: response.data.usage || { prompt_tokens: 0, completion_tokens: 0, total_tokens: 0 },
      timestamp: new Date().toISOString()
    };
  } catch (error) {
    // –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenRouter API:', error);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if (error.response) {
      // –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª —Å —Å—Ç–∞—Ç—É—Å-–∫–æ–¥–æ–º –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ 2xx
      console.error('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ —Å –æ—à–∏–±–∫–æ–π:', {
        status: error.response.status,
        headers: error.response.headers,
        data: error.response.data
      });
      
      if (error.response.status === 413 || (error.response.data && error.response.data.error && 
          error.response.data.error.message && error.response.data.error.message.includes('too large'))) {
        throw new Error(`–ü—Ä–æ–º–ø—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ API (${prompt.length} —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–º–µ–Ω—å—à–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞.`);
      }
      
      throw new Error(error.response.data?.error?.message || `–û—à–∏–±–∫–∞ API (–∫–æ–¥ ${error.response.status}): ${JSON.stringify(error.response.data)}`);
    } else if (error.request) {
      // –ó–∞–ø—Ä–æ—Å –±—ã–ª —Å–¥–µ–ª–∞–Ω, –Ω–æ –æ—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω
      if (error.code === 'ECONNABORTED') {
        throw new Error(`–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç API. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–º–ø—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (${prompt.length} —Å–∏–º–≤–æ–ª–æ–≤).`);
      }
      throw new Error(`–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${error.message}`);
    } else {
      // –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∑–∞–ø—Ä–æ—Å–∞
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –∏ –º–æ–¥–µ–ª–∏
function calculateRequestCost(modelId, promptTokens, completionTokens) {
  // –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  console.log('-------- –†–ê–°–ß–ï–¢ –°–¢–û–ò–ú–û–°–¢–ò --------');
  console.log(`–ú–æ–¥–µ–ª—å ID: ${modelId}`);
  console.log(`–¢–æ–∫–µ–Ω—ã –ø—Ä–æ–º–ø—Ç–∞: ${promptTokens}`);
  console.log(`–¢–æ–∫–µ–Ω—ã –æ—Ç–≤–µ—Ç–∞: ${completionTokens}`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ - —á–∏—Å–ª–∞
  if (typeof promptTokens !== 'number' || isNaN(promptTokens)) {
    console.log(`–û–®–ò–ë–ö–ê: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –ø—Ä–æ–º–ø—Ç–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º: ${promptTokens}`);
    promptTokens = 0;
  }
  
  if (typeof completionTokens !== 'number' || isNaN(completionTokens)) {
    console.log(`–û–®–ò–ë–ö–ê: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –æ—Ç–≤–µ—Ç–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º: ${completionTokens}`);
    completionTokens = 0;
  }
  
  // –ù–∞—Ö–æ–¥–∏–º –º–æ–¥–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ
  const model = availableModels.find(m => m.id === modelId);
  if (!model) {
    console.log(`–û–®–ò–ë–ö–ê: –ú–æ–¥–µ–ª—å —Å ID ${modelId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π`);
    return '–Ω/–¥ (–º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞)';
  }
  
  console.log(`–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏: ${model.name}`);
  console.log(`–¶–µ–Ω–∞ –∑–∞ —Ç–æ–∫–µ–Ω—ã –ø—Ä–æ–º–ø—Ç–∞: $${model.input_price}/M`);
  console.log(`–¶–µ–Ω–∞ –∑–∞ —Ç–æ–∫–µ–Ω—ã –æ—Ç–≤–µ—Ç–∞: $${model.output_price}/M`);
  
  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –≤—Ö–æ–¥–Ω—ã—Ö –∏ –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
  const inputCost = (promptTokens / 1000000) * model.input_price;
  const outputCost = (completionTokens / 1000000) * model.output_price;
  
  console.log(`–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–º–ø—Ç–∞: (${promptTokens} / 1000000) * ${model.input_price} = $${inputCost.toFixed(5)}`);
  console.log(`–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞: (${completionTokens} / 1000000) * ${model.output_price} = $${outputCost.toFixed(5)}`);
  
  // –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
  const totalCost = inputCost + outputCost;
  console.log(`–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: $${inputCost.toFixed(5)} + $${outputCost.toFixed(5)} = $${totalCost.toFixed(5)}`);
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º –¥–æ 5 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
  const formattedCost = totalCost.toFixed(5);
  console.log(`–û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: $${formattedCost}`);
  console.log('-------- –ö–û–ù–ï–¶ –†–ê–°–ß–ï–¢–ê --------');
  
  return {
    inputCost: `$${inputCost.toFixed(5)}`,
    outputCost: `$${outputCost.toFixed(5)}`,
    totalCost: `$${formattedCost}`
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è HTML —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞
function createHtmlResult(result, metadata) {
  // –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  console.log('-------- –î–ê–ù–ù–´–ï –î–õ–Ø HTML –û–¢–ß–ï–¢–ê --------');
  console.log('–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:', metadata);
  console.log('–î–∞–Ω–Ω—ã–µ –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏:', result.usage);
  
  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
  const promptTokens = result.usage && result.usage.prompt_tokens ? 
    parseInt(result.usage.prompt_tokens) : 0;
  
  const completionTokens = result.usage && result.usage.completion_tokens ? 
    parseInt(result.usage.completion_tokens) : 0;
  
  const totalTokens = result.usage && result.usage.total_tokens ? 
    parseInt(result.usage.total_tokens) : 0;
  
  console.log(`–¢–æ–∫–µ–Ω—ã –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞: ${promptTokens}`);
  console.log(`–¢–æ–∫–µ–Ω—ã –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞: ${completionTokens}`);
  console.log(`–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤: ${totalTokens}`);
  
  const costs = calculateRequestCost(metadata.model, promptTokens, completionTokens);
  console.log(`–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏:`, costs);
  
  // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ –æ–±—â–µ–≥–æ —Ä–µ–∑—é–º–µ
  let additionalInfo = '';
  
  if (metadata.isPartial) {
    additionalInfo = `<div class="part-info">
      <div class="part-badge">–ß–∞—Å—Ç—å ${metadata.partNumber} –∏–∑ ${metadata.totalParts}</div>
    </div>`;
  } else if (metadata.isSummary) {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Å—Ç–µ–π
    const partsInfo = metadata.validParts && metadata.validParts !== metadata.totalParts ? 
      `${metadata.validParts} –∏–∑ ${metadata.totalParts}` : 
      `${metadata.totalParts}`;
      
    additionalInfo = `<div class="summary-info">
      <div class="summary-badge">–û–±—â–µ–µ —Ä–µ–∑—é–º–µ (–æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ ${partsInfo} —á–∞—Å—Ç–µ–π)</div>
    </div>`;
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  const additionalStyles = `
    .part-info, .summary-info {
      margin: 10px 0;
      padding: 10px;
      border-radius: var(--border-radius);
      background-color: #f5f5f5;
      text-align: center;
    }
    
    .part-badge {
      display: inline-block;
      padding: 5px 15px;
      background-color: var(--accent-color);
      color: white;
      border-radius: 50px;
      font-weight: bold;
    }
    
    .summary-badge {
      display: inline-block;
      padding: 5px 15px;
      background: linear-gradient(135deg, #4CAF50, #8BC34A);
      color: white;
      border-radius: 50px;
      font-weight: bold;
    }
  `;

  const html = `
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞</title>
  <style>
    :root {
      --primary-color: #4863A0;
      --accent-color: #5D8AA8;
      --light-bg: #f8f9fa;
      --border-radius: 8px;
      --box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
      --transition: all 0.3s ease;
    }
    
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    
    body {
      font-family: 'Roboto', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      line-height: 1.6;
      color: #333;
      background-color: #f5f7fa;
      padding: 0;
      margin: 0;
    }
    
    .container {
      max-width: 900px;
      margin: 20px auto;
      padding: 0 20px;
    }
    
    .card {
      background-color: #fff;
      border-radius: var(--border-radius);
      box-shadow: var(--box-shadow);
      overflow: hidden;
      margin-bottom: 30px;
      transition: var(--transition);
    }
    
    .card:hover {
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.15);
    }
    
    .header {
      background: linear-gradient(135deg, var(--primary-color) 0%, var(--accent-color) 100%);
      color: white;
      padding: 25px;
      position: relative;
    }
    
    .header::after {
      content: '';
      position: absolute;
      bottom: -10px;
      left: 0;
      right: 0;
      height: 10px;
      background: linear-gradient(to bottom, rgba(0,0,0,0.1), transparent);
    }
    
    .metadata {
      background-color: #ffffff;
      padding: 20px;
      border-bottom: 1px solid #eee;
      font-size: 14px;
      color: #555;
    }
    
    .metadata-item {
      margin-bottom: 8px;
      display: flex;
      align-items: flex-start;
    }
    
    .metadata-label {
      min-width: 100px;
      font-weight: 600;
      color: var(--primary-color);
    }
    
    .timestamp {
      text-align: right;
      font-size: 12px;
      color: #888;
      margin-top: 10px;
    }
    
    .content-section {
      padding: 25px;
    }
    
    .section-title {
      color: var(--primary-color);
      font-size: 18px;
      margin-bottom: 15px;
      display: flex;
      align-items: center;
    }
    
    .section-title::before {
      content: '';
      display: inline-block;
      width: 4px;
      height: 18px;
      background-color: var(--accent-color);
      margin-right: 10px;
      border-radius: 2px;
    }
    
    .response {
      padding: 20px;
      background-color: var(--light-bg);
      border-radius: var(--border-radius);
      border-left: 4px solid var(--accent-color);
      margin-bottom: 20px;
      font-size: 15px;
    }
    
    .usage {
      background-color: #fff;
      padding: 20px;
      border-radius: var(--border-radius);
      border: 1px solid #eee;
    }
    
    .usage-grid {
      display: grid;
      grid-template-columns: repeat(3, 1fr);
      gap: 15px;
      margin-bottom: 20px;
    }
    
    .usage-item {
      padding: 15px;
      background-color: var(--light-bg);
      border-radius: var(--border-radius);
      text-align: center;
    }
    
    .usage-value {
      font-size: 18px;
      font-weight: 600;
      color: var(--primary-color);
      margin-top: 5px;
    }
    
    .usage-label {
      font-size: 12px;
      color: #666;
    }
    
    .cost {
      margin-top: 20px;
      padding: 15px;
      background-color: var(--light-bg);
      border-radius: var(--border-radius);
    }
    
    .cost-title {
      font-weight: 600;
      color: #e74c3c;
      margin-bottom: 10px;
    }
    
    .cost-grid {
      display: grid;
      grid-template-columns: repeat(3, 1fr);
      gap: 10px;
      font-size: 12px;
      color: #666;
    }
    
    .cost-item {
      padding: 8px;
      background-color: white;
      border-radius: var(--border-radius);
      text-align: center;
    }
    
    .cost-value {
      font-weight: 600;
      color: #555;
      margin-top: 5px;
    }
    
    h1 {
      color: white;
      font-size: 24px;
      margin-bottom: 5px;
    }
    
    h2 {
      font-size: 20px;
      margin-bottom: 20px;
    }
    
    pre {
      white-space: pre-wrap;
      word-wrap: break-word;
      font-family: 'Roboto Mono', monospace;
      line-height: 1.5;
    }
    
    ${additionalStyles}
    
    @media (max-width: 768px) {
      .usage-grid, .cost-grid {
        grid-template-columns: 1fr;
      }
      
      .container {
        padding: 10px;
      }
      
      .metadata-item {
        flex-direction: column;
      }
      
      .metadata-label {
        margin-bottom: 5px;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="card">
      <div class="header">
        <h1>–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞</h1>
        <p>–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º LLM</p>
      </div>
      
      ${additionalInfo}
      
      <div class="metadata">
        <div class="metadata-item">
          <div class="metadata-label">–ú–æ–¥–µ–ª—å:</div>
          <div>${metadata.model}</div>
        </div>
        <div class="metadata-item">
          <div class="metadata-label">–§–∞–π–ª:</div>
          <div>${metadata.fileName}</div>
        </div>
        <div class="metadata-item">
          <div class="metadata-label">–ü—Ä–æ–º–ø—Ç:</div>
          <div>${metadata.prompt}</div>
        </div>
        <div class="timestamp">
          –î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: ${result.timestamp}
        </div>
      </div>
      
      <div class="content-section">
        <div class="section-title">–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏</div>
        <div class="response">
          <pre>${result.response}</pre>
        </div>
        
        <div class="section-title">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</div>
        <div class="usage">
          <div class="usage-grid">
            <div class="usage-item">
              <div class="usage-label">–¢–æ–∫–µ–Ω—ã –ø—Ä–æ–º–ø—Ç–∞</div>
              <div class="usage-value">${promptTokens}</div>
            </div>
            <div class="usage-item">
              <div class="usage-label">–¢–æ–∫–µ–Ω—ã –æ—Ç–≤–µ—Ç–∞</div>
              <div class="usage-value">${completionTokens}</div>
            </div>
            <div class="usage-item">
              <div class="usage-label">–í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤</div>
              <div class="usage-value">${totalTokens}</div>
            </div>
          </div>
          
          <div class="cost">
            <div class="cost-title">–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞</div>
            <div class="cost-grid">
              <div class="cost-item">
                <div class="usage-label">–ü—Ä–æ–º–ø—Ç</div>
                <div class="cost-value">${costs.inputCost}</div>
              </div>
              <div class="cost-item">
                <div class="usage-label">–û—Ç–≤–µ—Ç</div>
                <div class="cost-value">${costs.outputCost}</div>
              </div>
              <div class="cost-item">
                <div class="usage-label">–ò—Ç–æ–≥–æ</div>
                <div class="cost-value">${costs.totalCost}</div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</body>
</html>
  `;
  
  return html;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–º–ø—Ç–∞ (–∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
function getSafePromptText(promptText) {
  const maxTelegramMsgLength = 4000; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram (—Å –∑–∞–ø–∞—Å–æ–º)
  
  if (!promptText || promptText.length <= maxTelegramMsgLength) {
    return promptText;
  }
  
  // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–µ–∑–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
  return promptText.substring(0, maxTelegramMsgLength - 200) + 
    '\n\n... [–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è] ...';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–º–ø—Ç–∞ (–ª–∏–±–æ –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ª–∏–±–æ –∫–∞–∫ —Ñ–∞–π–ª)
async function sendPromptToUser(chatId, promptName, promptText, messageId = null) {
  const maxTelegramMsgLength = 4000; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram (—Å –∑–∞–ø–∞—Å–æ–º)
  
  // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–æ—Ç–∫–∏–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ
  if (promptText.length <= maxTelegramMsgLength) {
    const message = `–í—ã–±—Ä–∞–Ω –ø—Ä–æ–º–ø—Ç: ${promptName}\n\n${promptText}`;
    
    if (messageId) {
      // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      return await bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId
      });
    } else {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      return await sendMessageWithRetry(chatId, message);
    }
  } else {
    // –î–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
    const tempFilePath = path.join(promptsDir, `temp_prompt_${Date.now()}.txt`);
    const fileContent = `–ü—Ä–æ–º–ø—Ç: ${promptName}\n\n${promptText}`;
    
    fs.writeFileSync(tempFilePath, fileContent, 'utf8');
    
    if (messageId) {
      // –ï—Å–ª–∏ –º—ã –ø—ã—Ç–∞–ª–∏—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–Ω–∞—á–∞–ª–∞ —Å–æ–æ–±—â–∞–µ–º, —á—Ç–æ –ø—Ä–æ–º–ø—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–∞–∫ —Ñ–∞–π–ª
      await bot.editMessageText(`–ü—Ä–æ–º–ø—Ç "${promptName}" —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è. –û—Ç–ø—Ä–∞–≤–ª—è—é –µ–≥–æ –∫–∞–∫ —Ñ–∞–π–ª...`, {
        chat_id: chatId,
        message_id: messageId
      });
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
    await bot.sendDocument(chatId, fs.createReadStream(tempFilePath), {
      caption: `–ü—Ä–æ–º–ø—Ç: ${promptName}`
    });
    
    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    setTimeout(() => {
      try {
        if (fs.existsSync(tempFilePath)) {
          fs.unlinkSync(tempFilePath);
        }
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –ø—Ä–æ–º–ø—Ç–∞:', err);
      }
    }, 5000);
    
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —á–∞—Å—Ç–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
function splitTextIntoChunks(text, maxChunkSize = 900000) {
  // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –º–µ–Ω—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –∫–∞–∫ –µ—Å—Ç—å
  if (text.length <= maxChunkSize) {
    return [text];
  }
  
  console.log(`–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Ä–∞–∑–º–µ—Ä–æ–º ${text.length} —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ ~${maxChunkSize} —Å–∏–º–≤–æ–ª–æ–≤`);
  
  const chunks = [];
  let startIndex = 0;
  
  while (startIndex < text.length) {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω–µ—Ü —á–∞—Å—Ç–∏
    let endIndex = startIndex + maxChunkSize;
    
    // –ï—Å–ª–∏ –º—ã –Ω–µ –¥–æ—à–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞ —Ç–µ–∫—Å—Ç–∞, –∏—â–µ–º –≥—Ä–∞–Ω–∏—Ü—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞
    if (endIndex < text.length) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–Ω—è (–Ω–æ–≤—ã–π –¥–µ–Ω—å –ø–µ—Ä–µ–ø–∏—Å–∫–∏)
      const dayDivider = text.lastIndexOf('', endIndex);
      
      // –ò—â–µ–º –±–ª–∏–∂–∞–π—à—É—é —Ç–æ—á–∫—É, –∑–∞ –∫–æ—Ç–æ—Ä–æ–π —Å–ª–µ–¥—É–µ—Ç –ø—Ä–æ–±–µ–ª –∏–ª–∏ –Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
      const possibleEnd = text.lastIndexOf('. ', endIndex);
      const possibleEndNewline = text.lastIndexOf('.\n', endIndex);
      const paragraphEnd = text.lastIndexOf('\n\n', endIndex);
      
      // –í—ã–±–∏—Ä–∞–µ–º –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é —Ç–æ—á–∫—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
      // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–Ω—è > –∫–æ–Ω–µ—Ü –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ > –∫–æ–Ω–µ—Ü –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
      if (dayDivider > startIndex + maxChunkSize / 2) {
        // –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ–º –Ω–∞ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ –¥–Ω–µ–π, —á—Ç–æ–±—ã –Ω–µ —Ä–∞–∑—Ä—ã–≤–∞—Ç—å –¥–Ω–∏ –º–µ–∂–¥—É —á–∞–Ω–∫–∞–º–∏
        endIndex = dayDivider;
      } else if (paragraphEnd > startIndex + maxChunkSize / 2) {
        // –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ–º –Ω–∞ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤
        endIndex = paragraphEnd + 2; // +2 –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è \n\n
      } else if (possibleEnd > startIndex + maxChunkSize / 2) {
        endIndex = possibleEnd + 1; // +1 —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å —Ç–æ—á–∫—É
      } else if (possibleEndNewline > startIndex + maxChunkSize / 2) {
        endIndex = possibleEndNewline + 2; // +2 —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å —Ç–æ—á–∫—É –∏ –ø–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏
      } else {
        // –ï—Å–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–π —Ç–æ—á–∫–∏ –Ω–µ—Ç, –∏—â–µ–º –∫–æ–Ω–µ—Ü –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–ª–æ–≤–∞
        const lastSpace = text.lastIndexOf(' ', endIndex);
        if (lastSpace > startIndex + maxChunkSize / 2) {
          endIndex = lastSpace + 1;
        }
        // –ï—Å–ª–∏ –∏ –ø—Ä–æ–±–µ–ª–∞ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –æ–±—Ä–µ–∑–∞–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É
      }
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —á–∞—Å—Ç—å
    const chunk = text.substring(startIndex, endIndex);
    chunks.push(chunk);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —á–∞—Å—Ç–∏
    startIndex = endIndex;
  }
  
  console.log(`–¢–µ–∫—Å—Ç —Ä–∞–∑–¥–µ–ª–µ–Ω –Ω–∞ ${chunks.length} —á–∞—Å—Ç–µ–π`);
  return chunks;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–Ω—é —Å –æ–ø—Ü–∏—è–º–∏ —Ä–∞–∑–º–µ—Ä–∞ –∞–Ω–∞–ª–∏–∑–∞
function getAnalysisSizeMenu(fileName) {
  return {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üöÄ –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (1.1MB)', callback_data: `analyze_full:${fileName}` }],
        [{ text: '‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä (900KB)', callback_data: `analyze_medium:${fileName}` }],
        [{ text: 'üîç –ù–µ–±–æ–ª—å—à–æ–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç (300KB)', callback_data: `analyze_small:${fileName}` }]
      ]
    }
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ —á–∞—Å—Ç—è–º
async function analyzeTextInChunks(chatId, messageId, modelId, prompt, textContent, maxTokensPerChunk = 900000) {
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userState = initUserState(chatId);
    
    // –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏, —É—á–∏—Ç—ã–≤–∞—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ —Ç–æ–∫–µ–Ω—ã
    const chunks = splitTextIntoChunks(textContent, maxTokensPerChunk);
    
    console.log(`–¢–µ–∫—Å—Ç —Ä–∞–∑–¥–µ–ª–µ–Ω –Ω–∞ ${chunks.length} —á–∞—Å—Ç–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞`);
    
    // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏
    const results = [];
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    const userAnalysisDir = path.join(analysisDir, chatId.toString());
    if (!fs.existsSync(userAnalysisDir)) {
      fs.mkdirSync(userAnalysisDir, { recursive: true });
    }
    
    // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    const totalChunks = chunks.length;
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
    for (let i = 0; i < chunks.length; i++) {
      const chunk = chunks[i];
      const chunkNumber = i + 1;
      
      try {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ö–æ–¥–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        await bot.editMessageText(`‚è≥ –ê–Ω–∞–ª–∏–∑ —á–∞—Å—Ç–∏ ${chunkNumber}/${totalChunks}...\n\n–†–∞–∑–º–µ—Ä —á–∞—Å—Ç–∏: ${Math.round(chunk.length / 1024)} –ö–ë`, {
          chat_id: chatId,
          message_id: messageId
        });
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —á–∞—Å—Ç–∏
        const partPrompt = `${prompt}\n\n–í–æ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (—á–∞—Å—Ç—å ${chunkNumber} –∏–∑ ${totalChunks}):\n${chunk}`;
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
        const result = await analyzeTextWithLLM(modelId, partPrompt);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ HTML —Ñ–∞–π–ª
        const partHtml = createHtmlResult(result, {
          model: modelId,
          prompt: prompt,
          fileName: `–ß–∞—Å—Ç—å ${chunkNumber} –∏–∑ ${totalChunks}`,
          isPartial: true,
          partNumber: chunkNumber,
          totalParts: totalChunks
        });
        
        // –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —á–∞—Å—Ç–∏
        const partResultPath = path.join(userAnalysisDir, `analysis_part_${chunkNumber}_of_${totalChunks}_${Date.now()}.html`);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML —Ñ–∞–π–ª
        fs.writeFileSync(partResultPath, partHtml, 'utf8');
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –º–∞—Å—Å–∏–≤
        results.push({
          path: partResultPath,
          response: result.response,
          partNumber: chunkNumber
        });
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —á–∞—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.sendDocument(chatId, fs.createReadStream(partResultPath), {
          caption: `–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —á–∞—Å—Ç–∏ ${chunkNumber}/${totalChunks}`
        });
        
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —á–∞—Å—Ç–∏ ${chunkNumber}:`, error);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        await bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —á–∞—Å—Ç–∏ ${chunkNumber}: ${error.message}\n\n–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —á–∞—Å—Ç–µ–π...`);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        results.push({
          path: null,
          response: `–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: ${error.message}`,
          partNumber: chunkNumber,
          error: true
        });
      }
    }
    
    // –°–æ–∑–¥–∞–µ–º –æ–±–æ–±—â–∞—é—â–∏–π –∑–∞–ø—Ä–æ—Å, –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (results.some(r => !r.error)) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      await bot.editMessageText(`‚úÖ –ê–Ω–∞–ª–∏–∑ ${totalChunks} —á–∞—Å—Ç–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–±—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...`, {
        chat_id: chatId,
        message_id: messageId
      });
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –æ–±–æ–±—â–µ–Ω–∏—è
      userState.analysisResults = results;
      userState.analysisPrompt = { text: prompt }; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä–µ–∑—é–º–µ
      userState.lastAnalysisModel = modelId; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å
      
      // –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—â–µ–≥–æ —Ä–µ–∑—é–º–µ - –±–æ–ª–µ–µ —è–≤–Ω–∞—è —Å emoji
      const inlineKeyboard = {
        inline_keyboard: [
          [{ text: 'üîÑ –°–æ–∑–¥–∞—Ç—å –æ–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –ø–æ –≤—Å–µ–º —á–∞—Å—Ç—è–º', callback_data: `summarize:${chatId}_${Date.now()}` }]
        ]
      };
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –≤–º–µ—Å—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ
      await bot.sendMessage(chatId, 
        `‚úÖ –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö ${totalChunks} —á–∞—Å—Ç–µ–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n` +
        `–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –æ–±—â–∏–π –∞–Ω–∞–ª–∏–∑, –∫–æ—Ç–æ—Ä—ã–π –æ–±—ä–µ–¥–∏–Ω–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö ${totalChunks} —á–∞—Å—Ç–µ–π –≤ –æ–¥–∏–Ω –¥–æ–∫—É–º–µ–Ω—Ç, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:`, 
        { reply_markup: inlineKeyboard }
      );
      
      console.log(`–ê–Ω–∞–ª–∏–∑ –ø–æ —á–∞—Å—Ç—è–º –∑–∞–≤–µ—Ä—à–µ–Ω, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: ${results.length} —á–∞—Å—Ç–µ–π`);
      
      return true;
    } else {
      await bot.editMessageText(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω—É —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞.`, {
        chat_id: chatId,
        message_id: messageId
      });
      
      return false;
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –º—É–ª—å—Ç–∏—á–∞—Å—Ç–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ:', error);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—â–µ–≥–æ —Ä–µ–∑—é–º–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —á–∞—Å—Ç–∏—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
async function createSummaryFromResults(chatId, messageId, modelId, results, originalPrompt) {
  try {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±–æ–±—â–µ–Ω–∏—è
    await bot.editMessageText(`‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ ${results.length} —á–∞—Å—Ç—è–º...`, {
      chat_id: chatId,
      message_id: messageId
    });
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –æ—à–∏–±–æ—á–Ω—ã—Ö —á–∞—Å—Ç–µ–π
    const validResults = results.filter(result => !result.error);
    console.log(`–ò–∑ ${results.length} —á–∞—Å—Ç–µ–π –¥–ª—è –æ–±–æ–±—â–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ${validResults.length} —á–∞—Å—Ç–µ–π (–±–µ–∑ –æ—à–∏–±–æ–∫)`);
    
    if (validResults.length === 0) {
      throw new Error('–ù–µ—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Å—Ç–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.');
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const selectedModel = availableModels.find(m => m.id === modelId);
    const modelName = selectedModel ? selectedModel.name : modelId;
    
    // –°–æ—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ–±–æ–±—â–µ–Ω–∏—è
    let summaryPrompt = `${originalPrompt}\n\n`;

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—â–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —á–∞—Å—Ç–µ–π –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –æ—à–∏–±–æ—á–Ω—ã—Ö —á–∞—Å—Ç–µ–π
    if (results.length !== validResults.length) {
      summaryPrompt += `–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π —Ç–µ–∫—Å—Ç –±—ã–ª —Ä–∞–∑–¥–µ–ª–µ–Ω –Ω–∞ ${results.length} —á–∞—Å—Ç–µ–π, –Ω–æ ${results.length - validResults.length} —á–∞—Å—Ç–µ–π –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫. –í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ —Å ${validResults.length} –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —á–∞—Å—Ç—è–º–∏.\n\n`;
    } else {
      summaryPrompt += `–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π —Ç–µ–∫—Å—Ç –±—ã–ª —Ä–∞–∑–¥–µ–ª–µ–Ω –Ω–∞ ${results.length} —á–∞—Å—Ç–µ–π –∏–∑-–∑–∞ –±–æ–ª—å—à–æ–≥–æ –æ–±—ä–µ–º–∞.\n\n`;
    }

    summaryPrompt += `–ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞, —Å–æ–±—Ä–∞–Ω–Ω—ã–π –∏–∑ –≤—Å–µ—Ö —á–∞—Å—Ç–µ–π. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –µ–≥–æ —Å–æ–≥–ª–∞—Å–Ω–æ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É.\n\n`;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏, –Ω–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ–º –∏—Ö –∫–∞–∫ –µ–¥–∏–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    validResults.forEach((result) => {
      summaryPrompt += `\n--- –ß–ê–°–¢–¨ ${result.partNumber} ---\n${result.response}\n`;
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    await bot.editMessageText(`‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ${validResults.length} —á–∞—Å—Ç–µ–π)...
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥–µ–ª—å: ${modelName}`, {
      chat_id: chatId,
      message_id: messageId
    });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–æ–±—â–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É—è –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å
    const summaryResult = await analyzeTextWithLLM(modelId, summaryPrompt);
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    const userAnalysisDir = path.join(analysisDir, chatId.toString());
    if (!fs.existsSync(userAnalysisDir)) {
      fs.mkdirSync(userAnalysisDir, { recursive: true });
    }
    
    // –°–æ–∑–¥–∞–µ–º HTML —Å –æ–±–æ–±—â–µ–Ω–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    const summaryHtml = createHtmlResult(summaryResult, {
      model: modelId,
      prompt: originalPrompt,
      fileName: `–û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ ${validResults.length} –∏–∑ ${results.length} —á–∞—Å—Ç–µ–π`,
      isSummary: true,
      totalParts: results.length,
      validParts: validResults.length
    });
    
    // –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    const summaryPath = path.join(userAnalysisDir, `analysis_summary_of_${validResults.length}_of_${results.length}_parts_${Date.now()}.html`);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML —Ñ–∞–π–ª
    fs.writeFileSync(summaryPath, summaryHtml, 'utf8');
    
    return summaryPath;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:', error);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏ RAR –∞—Ä—Ö–∏–≤–∞
async function extractRarArchive(rarPath, extractDir) {
  try {
    // –°—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª –∞—Ä—Ö–∏–≤–∞ –≤ –±—É—Ñ–µ—Ä
    const data = Uint8Array.from(fs.readFileSync(rarPath)).buffer;
    
    // –°–æ–∑–¥–∞–µ–º —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
    const extractor = await unrar.createExtractorFromData({
      data: data
    });
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
    const list = extractor.getFileList();
    const fileHeaders = [...list.fileHeaders];
    
    console.log(`RAR –∞—Ä—Ö–∏–≤ —Å–æ–¥–µ—Ä–∂–∏—Ç ${fileHeaders.length} —Ñ–∞–π–ª–æ–≤`);
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
    const extracted = extractor.extract();
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
    for (const file of extracted.files) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
      if (file.fileHeader.flags.directory) {
        continue;
      }
      
      // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      const filePath = path.join(extractDir, file.fileHeader.name);
      const fileDir = path.dirname(filePath);
      
      if (!fs.existsSync(fileDir)) {
        fs.mkdirSync(fileDir, { recursive: true });
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
      fs.writeFileSync(filePath, Buffer.from(file.extraction));
    }
    
    return true;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–µ RAR –∞—Ä—Ö–∏–≤–∞:', error);
    return false;
  }
}

console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.'); 